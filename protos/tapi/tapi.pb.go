// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tapi.proto

package tapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TapiWarpper service

type TapiWarpperClient interface {
	// 获取企业中角色下的员工列表
	RoleSimplelist(ctx context.Context, in *RoleSimplelistRequest, opts ...grpc.CallOption) (*RoleSimplelistResponse, error)
	// 获取企业角色列表
	RoleList(ctx context.Context, in *RoleListRequest, opts ...grpc.CallOption) (*RoleListResponse, error)
	// 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量为员工增加角色信息
	AddRolesForEmps(ctx context.Context, in *AddRolesForEmpsRequest, opts ...grpc.CallOption) (*AddRolesForEmpsResponse, error)
	// 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量删除员工的角色信息。 角色在钉钉的组织结构里面就是标签的意思，你可以批量为一批用户添加一批角色信息（dingtalk.corp.role.addrolesforemps），那么调用该接口就可以批量删除已经存在的角色和员工对应关系，角色和员工是多对多的关系。参考代码如下： req.setRolelidList("1,2,3,4,5"); // 已经存在的角色id列表 req.setUseridList("a,b,c,d,e"); // 用户的id列表
	RemoveRolesForEmps(ctx context.Context, in *RemoveRolesForEmpsRequest, opts ...grpc.CallOption) (*RemoveRolesForEmpsResponse, error)
	// 企业在做企业内部组织结构角色管理的时候，如果需要删除该企业下某个角色信息，可以调用该接口。调用的前提是该角色下面的所有员工都已经被删除该角色
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error)
	// 该接口通过groupId参数可以获取该角色组详细信息以及下面所有关联的角色的信息
	GetRoleGroup(ctx context.Context, in *GetRoleGroupRequest, opts ...grpc.CallOption) (*GetRoleGroupResponse, error)
	// 获取角色详情
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error)
}

type tapiWarpperClient struct {
	cc *grpc.ClientConn
}

func NewTapiWarpperClient(cc *grpc.ClientConn) TapiWarpperClient {
	return &tapiWarpperClient{cc}
}

func (c *tapiWarpperClient) RoleSimplelist(ctx context.Context, in *RoleSimplelistRequest, opts ...grpc.CallOption) (*RoleSimplelistResponse, error) {
	out := new(RoleSimplelistResponse)
	err := grpc.Invoke(ctx, "/tapi.TapiWarpper/RoleSimplelist", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapiWarpperClient) RoleList(ctx context.Context, in *RoleListRequest, opts ...grpc.CallOption) (*RoleListResponse, error) {
	out := new(RoleListResponse)
	err := grpc.Invoke(ctx, "/tapi.TapiWarpper/RoleList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapiWarpperClient) AddRolesForEmps(ctx context.Context, in *AddRolesForEmpsRequest, opts ...grpc.CallOption) (*AddRolesForEmpsResponse, error) {
	out := new(AddRolesForEmpsResponse)
	err := grpc.Invoke(ctx, "/tapi.TapiWarpper/AddRolesForEmps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapiWarpperClient) RemoveRolesForEmps(ctx context.Context, in *RemoveRolesForEmpsRequest, opts ...grpc.CallOption) (*RemoveRolesForEmpsResponse, error) {
	out := new(RemoveRolesForEmpsResponse)
	err := grpc.Invoke(ctx, "/tapi.TapiWarpper/RemoveRolesForEmps", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapiWarpperClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*DeleteRoleResponse, error) {
	out := new(DeleteRoleResponse)
	err := grpc.Invoke(ctx, "/tapi.TapiWarpper/DeleteRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapiWarpperClient) GetRoleGroup(ctx context.Context, in *GetRoleGroupRequest, opts ...grpc.CallOption) (*GetRoleGroupResponse, error) {
	out := new(GetRoleGroupResponse)
	err := grpc.Invoke(ctx, "/tapi.TapiWarpper/GetRoleGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapiWarpperClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*GetRoleResponse, error) {
	out := new(GetRoleResponse)
	err := grpc.Invoke(ctx, "/tapi.TapiWarpper/GetRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TapiWarpper service

type TapiWarpperServer interface {
	// 获取企业中角色下的员工列表
	RoleSimplelist(context.Context, *RoleSimplelistRequest) (*RoleSimplelistResponse, error)
	// 获取企业角色列表
	RoleList(context.Context, *RoleListRequest) (*RoleListResponse, error)
	// 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量为员工增加角色信息
	AddRolesForEmps(context.Context, *AddRolesForEmpsRequest) (*AddRolesForEmpsResponse, error)
	// 企业在做企业员工管理的时候，需要对部分员工进行角色分类，该接口可以批量删除员工的角色信息。 角色在钉钉的组织结构里面就是标签的意思，你可以批量为一批用户添加一批角色信息（dingtalk.corp.role.addrolesforemps），那么调用该接口就可以批量删除已经存在的角色和员工对应关系，角色和员工是多对多的关系。参考代码如下： req.setRolelidList("1,2,3,4,5"); // 已经存在的角色id列表 req.setUseridList("a,b,c,d,e"); // 用户的id列表
	RemoveRolesForEmps(context.Context, *RemoveRolesForEmpsRequest) (*RemoveRolesForEmpsResponse, error)
	// 企业在做企业内部组织结构角色管理的时候，如果需要删除该企业下某个角色信息，可以调用该接口。调用的前提是该角色下面的所有员工都已经被删除该角色
	DeleteRole(context.Context, *DeleteRoleRequest) (*DeleteRoleResponse, error)
	// 该接口通过groupId参数可以获取该角色组详细信息以及下面所有关联的角色的信息
	GetRoleGroup(context.Context, *GetRoleGroupRequest) (*GetRoleGroupResponse, error)
	// 获取角色详情
	GetRole(context.Context, *GetRoleRequest) (*GetRoleResponse, error)
}

func RegisterTapiWarpperServer(s *grpc.Server, srv TapiWarpperServer) {
	s.RegisterService(&_TapiWarpper_serviceDesc, srv)
}

func _TapiWarpper_RoleSimplelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleSimplelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapiWarpperServer).RoleSimplelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapi.TapiWarpper/RoleSimplelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapiWarpperServer).RoleSimplelist(ctx, req.(*RoleSimplelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapiWarpper_RoleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RoleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapiWarpperServer).RoleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapi.TapiWarpper/RoleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapiWarpperServer).RoleList(ctx, req.(*RoleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapiWarpper_AddRolesForEmps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRolesForEmpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapiWarpperServer).AddRolesForEmps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapi.TapiWarpper/AddRolesForEmps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapiWarpperServer).AddRolesForEmps(ctx, req.(*AddRolesForEmpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapiWarpper_RemoveRolesForEmps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRolesForEmpsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapiWarpperServer).RemoveRolesForEmps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapi.TapiWarpper/RemoveRolesForEmps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapiWarpperServer).RemoveRolesForEmps(ctx, req.(*RemoveRolesForEmpsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapiWarpper_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapiWarpperServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapi.TapiWarpper/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapiWarpperServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapiWarpper_GetRoleGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapiWarpperServer).GetRoleGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapi.TapiWarpper/GetRoleGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapiWarpperServer).GetRoleGroup(ctx, req.(*GetRoleGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapiWarpper_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapiWarpperServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapi.TapiWarpper/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapiWarpperServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TapiWarpper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tapi.TapiWarpper",
	HandlerType: (*TapiWarpperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RoleSimplelist",
			Handler:    _TapiWarpper_RoleSimplelist_Handler,
		},
		{
			MethodName: "RoleList",
			Handler:    _TapiWarpper_RoleList_Handler,
		},
		{
			MethodName: "AddRolesForEmps",
			Handler:    _TapiWarpper_AddRolesForEmps_Handler,
		},
		{
			MethodName: "RemoveRolesForEmps",
			Handler:    _TapiWarpper_RemoveRolesForEmps_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _TapiWarpper_DeleteRole_Handler,
		},
		{
			MethodName: "GetRoleGroup",
			Handler:    _TapiWarpper_GetRoleGroup_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _TapiWarpper_GetRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tapi.proto",
}

func init() { proto.RegisterFile("tapi.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x45, 0x8a, 0xca, 0xad, 0x3f, 0x70, 0xb1, 0xfe, 0x44, 0x8b, 0xe2, 0x03, 0x44, 0xd0,
	0x8d, 0xe0, 0xaa, 0x52, 0xcd, 0xa6, 0x82, 0xc4, 0x82, 0xe8, 0x2e, 0xd2, 0x8b, 0x0c, 0x4e, 0x3a,
	0xd7, 0x99, 0xa9, 0x4f, 0xe1, 0x93, 0xf8, 0x94, 0x65, 0x92, 0xcc, 0xb4, 0x49, 0x9b, 0x5d, 0x38,
	0xdf, 0x39, 0x5f, 0x66, 0x71, 0x01, 0x6c, 0xc6, 0x22, 0x66, 0xad, 0xac, 0xc2, 0x8e, 0xfb, 0x8e,
	0x40, 0x2b, 0x49, 0x65, 0x72, 0xf3, 0xd7, 0x81, 0xee, 0x38, 0x63, 0xf1, 0x96, 0x69, 0x66, 0xd2,
	0xf8, 0x0c, 0xfb, 0xa9, 0x92, 0xf4, 0x2a, 0x72, 0x96, 0x24, 0x85, 0xb1, 0x78, 0x16, 0x17, 0x82,
	0x7a, 0x9a, 0xd2, 0xcf, 0x8c, 0x8c, 0x8d, 0xce, 0xd7, 0x43, 0xc3, 0x6a, 0x6a, 0xe8, 0x6a, 0x03,
	0xef, 0x61, 0xc7, 0xb1, 0x91, 0x13, 0xf5, 0x16, 0xdd, 0xd1, 0x92, 0xe2, 0xa8, 0x19, 0x87, 0xf1,
	0x0b, 0x1c, 0x0c, 0x26, 0x13, 0x07, 0xcc, 0x93, 0xd2, 0x8f, 0x39, 0x1b, 0xac, 0xfe, 0xd7, 0x88,
	0xbd, 0xaa, 0xdf, 0x42, 0x83, 0xf1, 0x1d, 0x30, 0xa5, 0x5c, 0xfd, 0x52, 0x4d, 0x7a, 0x51, 0xbd,
	0x60, 0x85, 0x78, 0xef, 0x65, 0x7b, 0x21, 0xa8, 0x07, 0x00, 0x43, 0x92, 0x64, 0x0b, 0x8e, 0xc7,
	0xe5, 0x62, 0x91, 0x78, 0xd5, 0xc9, 0x2a, 0x08, 0x8a, 0x04, 0x76, 0x13, 0xb2, 0x2e, 0x4c, 0xb4,
	0x9a, 0x31, 0x9e, 0x96, 0xdd, 0xe5, 0xcc, 0x6b, 0xa2, 0x75, 0x28, 0x88, 0xee, 0x60, 0xbb, 0x22,
	0x78, 0x58, 0x2b, 0xfa, 0x79, 0xaf, 0x91, 0xfa, 0xe5, 0x43, 0xff, 0xa3, 0x5b, 0xdc, 0x85, 0xb9,
	0x76, 0x85, 0xff, 0xcd, 0xbd, 0xa1, 0x98, 0x7e, 0x8d, 0x33, 0xf9, 0x1d, 0xbb, 0x23, 0xf9, 0xdc,
	0x2a, 0xe0, 0xed, 0x3c, 0x00, 0x00, 0xff, 0xff, 0x49, 0x3f, 0x02, 0x7c, 0x54, 0x02, 0x00, 0x00,
}
