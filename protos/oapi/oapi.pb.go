// Code generated by protoc-gen-go. DO NOT EDIT.
// source: oapi.proto

package oapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// OapiWarpperClient is the client API for OapiWarpper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OapiWarpperClient interface {
	// 刷新企业获取的access_token
	// Access_Token是企业访问钉钉开放平台全局接口的唯一凭证，即调用接口时需携带Access_Token。
	// 对于企业接入来说，AccessToken需要用CorpID和CorpSecret来换取，CorpID是企业在钉钉中的标识；每个企业拥有一个唯一的CorpID，CorpSecret是企业每个微应用的凭证密钥。
	// CorpID和CorpSecret可以在开发者后台中找到，
	// 对于ISV接入来说，可以通过企业对ISV的授权获取企业授权的access_token。
	// 不同的CorpSecret会返回不同的AccessToken。正常情况下AccessToken有效期为7200秒，有效期内重复获取返回相同结果，并自动续期。
	RefreshCompanyAccessToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// 刷新 SNS access_token
	// 普通钉钉用户账号开放
	// 获取钉钉开放应用的ACCESS_TOKEN
	// 普通钉钉用户账号开放相关接口和企业应用开发、ISV应用开发无关，第三方web服务提供商取得钉钉开放应用的appid及appsecret后，可以获取开放应用的ACCESS_TOKEN
	RefreshSNSAccessToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	// 获取钉钉配置信息（JSAPI）
	DingTalkConfig(ctx context.Context, in *DingTalkConfigRequest, opts ...grpc.CallOption) (*DingTalkConfigResponse, error)
	// 获取用户授权的持久授权码
	SnsGetPersistentCode(ctx context.Context, in *SnsGetPersistentCodeRequest, opts ...grpc.CallOption) (*SnsGetPersistentCodeResponse, error)
	// 获取用户授权的SNS_TOKEN
	SnsGetSnsToken(ctx context.Context, in *SnsGetSnsTokenRequest, opts ...grpc.CallOption) (*SnsGetSnsTokenResponse, error)
	// 获取用户授权的个人信息
	SnsGetUserInfo(ctx context.Context, in *SnsGetUserInfoRequest, opts ...grpc.CallOption) (*SnsGetUserInfoResponse, error)
	// 第三方网站使用钉钉账号登陆
	SnsAuthorize(ctx context.Context, in *SnsAuthorizeRequest, opts ...grpc.CallOption) (*SnsAuthorizeResponse, error)
	// 第三方网站使用钉钉扫码登陆
	Qrconnect(ctx context.Context, in *QrconnectRequest, opts ...grpc.CallOption) (*QrconnectResponse, error)
	// 通过Code获取userid
	UserIdByCode(ctx context.Context, in *UserIdByCodeRequest, opts ...grpc.CallOption) (*UserIdByCodeResponse, error)
	// 通过UnionId获取UserId
	UserIdByUnionId(ctx context.Context, in *UserIdByUnionIdRequest, opts ...grpc.CallOption) (*UserIdByUnionIdResponse, error)
	// 通过userid获取用户详细信息
	UserInfoByUserId(ctx context.Context, in *UserInfoByUserIdRequest, opts ...grpc.CallOption) (*UserInfoByUserIdResponse, error)
	// 获取部门成员（简化版）
	UserSimpleList(ctx context.Context, in *UserSimpleListRequest, opts ...grpc.CallOption) (*UserSimpleListResponse, error)
	// 获取部门成员（详情版）
	UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	// 获取管理员列表
	UserAdminList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserAdminListResponse, error)
	// 获取管理员的微应用管理权限
	UserCanAccessMicroapp(ctx context.Context, in *UserCanAccessMicroappRequest, opts ...grpc.CallOption) (*UserCanAccessMicroappResponse, error)
	// 创建成员
	UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error)
	// 更新成员
	UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*OpenApiResponse, error)
	// 删除成员
	UserDelete(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*OpenApiResponse, error)
	// 批量删除成员
	UserBatchDelete(ctx context.Context, in *UserBatchDeleteRequest, opts ...grpc.CallOption) (*OpenApiResponse, error)
	// 获取企业员工人数
	UserGetOrgUserCount(ctx context.Context, in *UserGetOrgUserCountRequest, opts ...grpc.CallOption) (*UserGetOrgUserCountResponse, error)
	// 获取子部门Id列表
	SubDepartmentList(ctx context.Context, in *SubDepartmentListRequest, opts ...grpc.CallOption) (*SubDepartmentListResponse, error)
	// 获取部门列表
	DepartmentList(ctx context.Context, in *DepartmentListRequest, opts ...grpc.CallOption) (*DepartmentListResponse, error)
	// 获取部门详情
	DepartmentDetail(ctx context.Context, in *DepartmentDetailRequest, opts ...grpc.CallOption) (*DepartmentDetailResponse, error)
	// 创建部门
	DepartmentCreate(ctx context.Context, in *DepartmentCreateRequest, opts ...grpc.CallOption) (*DepartmentCreateResponse, error)
	// 更新部门
	DepartmentUpdate(ctx context.Context, in *DepartmentUpdateRequest, opts ...grpc.CallOption) (*DepartmentUpdateResponse, error)
	// 删除部门
	DepartmentDelete(ctx context.Context, in *DepartmentDeleteRequest, opts ...grpc.CallOption) (*OpenApiResponse, error)
	// 查询部门的所有上级父部门路径
	DepartmentListParentDeptsByDept(ctx context.Context, in *DepartmentListParentDeptsByDeptRequest, opts ...grpc.CallOption) (*DepartmentListParentDeptsByDeptResponse, error)
	// 查询指定用户的所有上级父部门路径
	DepartmentListParentDepts(ctx context.Context, in *DepartmentListParentDeptsRequest, opts ...grpc.CallOption) (*DepartmentListParentDeptsResponse, error)
}

type oapiWarpperClient struct {
	cc *grpc.ClientConn
}

func NewOapiWarpperClient(cc *grpc.ClientConn) OapiWarpperClient {
	return &oapiWarpperClient{cc}
}

func (c *oapiWarpperClient) RefreshCompanyAccessToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/RefreshCompanyAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) RefreshSNSAccessToken(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/RefreshSNSAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) DingTalkConfig(ctx context.Context, in *DingTalkConfigRequest, opts ...grpc.CallOption) (*DingTalkConfigResponse, error) {
	out := new(DingTalkConfigResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/DingTalkConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) SnsGetPersistentCode(ctx context.Context, in *SnsGetPersistentCodeRequest, opts ...grpc.CallOption) (*SnsGetPersistentCodeResponse, error) {
	out := new(SnsGetPersistentCodeResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/SnsGetPersistentCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) SnsGetSnsToken(ctx context.Context, in *SnsGetSnsTokenRequest, opts ...grpc.CallOption) (*SnsGetSnsTokenResponse, error) {
	out := new(SnsGetSnsTokenResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/SnsGetSnsToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) SnsGetUserInfo(ctx context.Context, in *SnsGetUserInfoRequest, opts ...grpc.CallOption) (*SnsGetUserInfoResponse, error) {
	out := new(SnsGetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/SnsGetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) SnsAuthorize(ctx context.Context, in *SnsAuthorizeRequest, opts ...grpc.CallOption) (*SnsAuthorizeResponse, error) {
	out := new(SnsAuthorizeResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/SnsAuthorize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) Qrconnect(ctx context.Context, in *QrconnectRequest, opts ...grpc.CallOption) (*QrconnectResponse, error) {
	out := new(QrconnectResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/Qrconnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserIdByCode(ctx context.Context, in *UserIdByCodeRequest, opts ...grpc.CallOption) (*UserIdByCodeResponse, error) {
	out := new(UserIdByCodeResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserIdByCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserIdByUnionId(ctx context.Context, in *UserIdByUnionIdRequest, opts ...grpc.CallOption) (*UserIdByUnionIdResponse, error) {
	out := new(UserIdByUnionIdResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserIdByUnionId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserInfoByUserId(ctx context.Context, in *UserInfoByUserIdRequest, opts ...grpc.CallOption) (*UserInfoByUserIdResponse, error) {
	out := new(UserInfoByUserIdResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserInfoByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserSimpleList(ctx context.Context, in *UserSimpleListRequest, opts ...grpc.CallOption) (*UserSimpleListResponse, error) {
	out := new(UserSimpleListResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserSimpleList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserAdminList(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UserAdminListResponse, error) {
	out := new(UserAdminListResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserAdminList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserCanAccessMicroapp(ctx context.Context, in *UserCanAccessMicroappRequest, opts ...grpc.CallOption) (*UserCanAccessMicroappResponse, error) {
	out := new(UserCanAccessMicroappResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserCanAccessMicroapp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserCreate(ctx context.Context, in *UserCreateRequest, opts ...grpc.CallOption) (*UserCreateResponse, error) {
	out := new(UserCreateResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserUpdate(ctx context.Context, in *UserUpdateRequest, opts ...grpc.CallOption) (*OpenApiResponse, error) {
	out := new(OpenApiResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserDelete(ctx context.Context, in *UserDeleteRequest, opts ...grpc.CallOption) (*OpenApiResponse, error) {
	out := new(OpenApiResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserBatchDelete(ctx context.Context, in *UserBatchDeleteRequest, opts ...grpc.CallOption) (*OpenApiResponse, error) {
	out := new(OpenApiResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserBatchDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) UserGetOrgUserCount(ctx context.Context, in *UserGetOrgUserCountRequest, opts ...grpc.CallOption) (*UserGetOrgUserCountResponse, error) {
	out := new(UserGetOrgUserCountResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/UserGetOrgUserCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) SubDepartmentList(ctx context.Context, in *SubDepartmentListRequest, opts ...grpc.CallOption) (*SubDepartmentListResponse, error) {
	out := new(SubDepartmentListResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/SubDepartmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) DepartmentList(ctx context.Context, in *DepartmentListRequest, opts ...grpc.CallOption) (*DepartmentListResponse, error) {
	out := new(DepartmentListResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/DepartmentList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) DepartmentDetail(ctx context.Context, in *DepartmentDetailRequest, opts ...grpc.CallOption) (*DepartmentDetailResponse, error) {
	out := new(DepartmentDetailResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/DepartmentDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) DepartmentCreate(ctx context.Context, in *DepartmentCreateRequest, opts ...grpc.CallOption) (*DepartmentCreateResponse, error) {
	out := new(DepartmentCreateResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/DepartmentCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) DepartmentUpdate(ctx context.Context, in *DepartmentUpdateRequest, opts ...grpc.CallOption) (*DepartmentUpdateResponse, error) {
	out := new(DepartmentUpdateResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/DepartmentUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) DepartmentDelete(ctx context.Context, in *DepartmentDeleteRequest, opts ...grpc.CallOption) (*OpenApiResponse, error) {
	out := new(OpenApiResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/DepartmentDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) DepartmentListParentDeptsByDept(ctx context.Context, in *DepartmentListParentDeptsByDeptRequest, opts ...grpc.CallOption) (*DepartmentListParentDeptsByDeptResponse, error) {
	out := new(DepartmentListParentDeptsByDeptResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/DepartmentListParentDeptsByDept", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oapiWarpperClient) DepartmentListParentDepts(ctx context.Context, in *DepartmentListParentDeptsRequest, opts ...grpc.CallOption) (*DepartmentListParentDeptsResponse, error) {
	out := new(DepartmentListParentDeptsResponse)
	err := c.cc.Invoke(ctx, "/oapi.OapiWarpper/DepartmentListParentDepts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OapiWarpperServer is the server API for OapiWarpper service.
type OapiWarpperServer interface {
	// 刷新企业获取的access_token
	// Access_Token是企业访问钉钉开放平台全局接口的唯一凭证，即调用接口时需携带Access_Token。
	// 对于企业接入来说，AccessToken需要用CorpID和CorpSecret来换取，CorpID是企业在钉钉中的标识；每个企业拥有一个唯一的CorpID，CorpSecret是企业每个微应用的凭证密钥。
	// CorpID和CorpSecret可以在开发者后台中找到，
	// 对于ISV接入来说，可以通过企业对ISV的授权获取企业授权的access_token。
	// 不同的CorpSecret会返回不同的AccessToken。正常情况下AccessToken有效期为7200秒，有效期内重复获取返回相同结果，并自动续期。
	RefreshCompanyAccessToken(context.Context, *empty.Empty) (*empty.Empty, error)
	// 刷新 SNS access_token
	// 普通钉钉用户账号开放
	// 获取钉钉开放应用的ACCESS_TOKEN
	// 普通钉钉用户账号开放相关接口和企业应用开发、ISV应用开发无关，第三方web服务提供商取得钉钉开放应用的appid及appsecret后，可以获取开放应用的ACCESS_TOKEN
	RefreshSNSAccessToken(context.Context, *empty.Empty) (*empty.Empty, error)
	// 获取钉钉配置信息（JSAPI）
	DingTalkConfig(context.Context, *DingTalkConfigRequest) (*DingTalkConfigResponse, error)
	// 获取用户授权的持久授权码
	SnsGetPersistentCode(context.Context, *SnsGetPersistentCodeRequest) (*SnsGetPersistentCodeResponse, error)
	// 获取用户授权的SNS_TOKEN
	SnsGetSnsToken(context.Context, *SnsGetSnsTokenRequest) (*SnsGetSnsTokenResponse, error)
	// 获取用户授权的个人信息
	SnsGetUserInfo(context.Context, *SnsGetUserInfoRequest) (*SnsGetUserInfoResponse, error)
	// 第三方网站使用钉钉账号登陆
	SnsAuthorize(context.Context, *SnsAuthorizeRequest) (*SnsAuthorizeResponse, error)
	// 第三方网站使用钉钉扫码登陆
	Qrconnect(context.Context, *QrconnectRequest) (*QrconnectResponse, error)
	// 通过Code获取userid
	UserIdByCode(context.Context, *UserIdByCodeRequest) (*UserIdByCodeResponse, error)
	// 通过UnionId获取UserId
	UserIdByUnionId(context.Context, *UserIdByUnionIdRequest) (*UserIdByUnionIdResponse, error)
	// 通过userid获取用户详细信息
	UserInfoByUserId(context.Context, *UserInfoByUserIdRequest) (*UserInfoByUserIdResponse, error)
	// 获取部门成员（简化版）
	UserSimpleList(context.Context, *UserSimpleListRequest) (*UserSimpleListResponse, error)
	// 获取部门成员（详情版）
	UserList(context.Context, *UserListRequest) (*UserListResponse, error)
	// 获取管理员列表
	UserAdminList(context.Context, *empty.Empty) (*UserAdminListResponse, error)
	// 获取管理员的微应用管理权限
	UserCanAccessMicroapp(context.Context, *UserCanAccessMicroappRequest) (*UserCanAccessMicroappResponse, error)
	// 创建成员
	UserCreate(context.Context, *UserCreateRequest) (*UserCreateResponse, error)
	// 更新成员
	UserUpdate(context.Context, *UserUpdateRequest) (*OpenApiResponse, error)
	// 删除成员
	UserDelete(context.Context, *UserDeleteRequest) (*OpenApiResponse, error)
	// 批量删除成员
	UserBatchDelete(context.Context, *UserBatchDeleteRequest) (*OpenApiResponse, error)
	// 获取企业员工人数
	UserGetOrgUserCount(context.Context, *UserGetOrgUserCountRequest) (*UserGetOrgUserCountResponse, error)
	// 获取子部门Id列表
	SubDepartmentList(context.Context, *SubDepartmentListRequest) (*SubDepartmentListResponse, error)
	// 获取部门列表
	DepartmentList(context.Context, *DepartmentListRequest) (*DepartmentListResponse, error)
	// 获取部门详情
	DepartmentDetail(context.Context, *DepartmentDetailRequest) (*DepartmentDetailResponse, error)
	// 创建部门
	DepartmentCreate(context.Context, *DepartmentCreateRequest) (*DepartmentCreateResponse, error)
	// 更新部门
	DepartmentUpdate(context.Context, *DepartmentUpdateRequest) (*DepartmentUpdateResponse, error)
	// 删除部门
	DepartmentDelete(context.Context, *DepartmentDeleteRequest) (*OpenApiResponse, error)
	// 查询部门的所有上级父部门路径
	DepartmentListParentDeptsByDept(context.Context, *DepartmentListParentDeptsByDeptRequest) (*DepartmentListParentDeptsByDeptResponse, error)
	// 查询指定用户的所有上级父部门路径
	DepartmentListParentDepts(context.Context, *DepartmentListParentDeptsRequest) (*DepartmentListParentDeptsResponse, error)
}

func RegisterOapiWarpperServer(s *grpc.Server, srv OapiWarpperServer) {
	s.RegisterService(&_OapiWarpper_serviceDesc, srv)
}

func _OapiWarpper_RefreshCompanyAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).RefreshCompanyAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/RefreshCompanyAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).RefreshCompanyAccessToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_RefreshSNSAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).RefreshSNSAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/RefreshSNSAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).RefreshSNSAccessToken(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_DingTalkConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DingTalkConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).DingTalkConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/DingTalkConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).DingTalkConfig(ctx, req.(*DingTalkConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_SnsGetPersistentCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnsGetPersistentCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).SnsGetPersistentCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/SnsGetPersistentCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).SnsGetPersistentCode(ctx, req.(*SnsGetPersistentCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_SnsGetSnsToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnsGetSnsTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).SnsGetSnsToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/SnsGetSnsToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).SnsGetSnsToken(ctx, req.(*SnsGetSnsTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_SnsGetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnsGetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).SnsGetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/SnsGetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).SnsGetUserInfo(ctx, req.(*SnsGetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_SnsAuthorize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SnsAuthorizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).SnsAuthorize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/SnsAuthorize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).SnsAuthorize(ctx, req.(*SnsAuthorizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_Qrconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QrconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).Qrconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/Qrconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).Qrconnect(ctx, req.(*QrconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserIdByCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdByCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserIdByCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserIdByCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserIdByCode(ctx, req.(*UserIdByCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserIdByUnionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserIdByUnionIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserIdByUnionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserIdByUnionId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserIdByUnionId(ctx, req.(*UserIdByUnionIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserInfoByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoByUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserInfoByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserInfoByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserInfoByUserId(ctx, req.(*UserInfoByUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserSimpleList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSimpleListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserSimpleList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserSimpleList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserSimpleList(ctx, req.(*UserSimpleListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserList(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserAdminList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserAdminList(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserCanAccessMicroapp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCanAccessMicroappRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserCanAccessMicroapp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserCanAccessMicroapp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserCanAccessMicroapp(ctx, req.(*UserCanAccessMicroappRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserCreate(ctx, req.(*UserCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserUpdate(ctx, req.(*UserUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserDelete(ctx, req.(*UserDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserBatchDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserBatchDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserBatchDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserBatchDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserBatchDelete(ctx, req.(*UserBatchDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_UserGetOrgUserCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetOrgUserCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).UserGetOrgUserCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/UserGetOrgUserCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).UserGetOrgUserCount(ctx, req.(*UserGetOrgUserCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_SubDepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubDepartmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).SubDepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/SubDepartmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).SubDepartmentList(ctx, req.(*SubDepartmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_DepartmentList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).DepartmentList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/DepartmentList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).DepartmentList(ctx, req.(*DepartmentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_DepartmentDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).DepartmentDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/DepartmentDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).DepartmentDetail(ctx, req.(*DepartmentDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_DepartmentCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).DepartmentCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/DepartmentCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).DepartmentCreate(ctx, req.(*DepartmentCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_DepartmentUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).DepartmentUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/DepartmentUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).DepartmentUpdate(ctx, req.(*DepartmentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_DepartmentDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).DepartmentDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/DepartmentDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).DepartmentDelete(ctx, req.(*DepartmentDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_DepartmentListParentDeptsByDept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentListParentDeptsByDeptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).DepartmentListParentDeptsByDept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/DepartmentListParentDeptsByDept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).DepartmentListParentDeptsByDept(ctx, req.(*DepartmentListParentDeptsByDeptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OapiWarpper_DepartmentListParentDepts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentListParentDeptsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OapiWarpperServer).DepartmentListParentDepts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oapi.OapiWarpper/DepartmentListParentDepts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OapiWarpperServer).DepartmentListParentDepts(ctx, req.(*DepartmentListParentDeptsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OapiWarpper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "oapi.OapiWarpper",
	HandlerType: (*OapiWarpperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefreshCompanyAccessToken",
			Handler:    _OapiWarpper_RefreshCompanyAccessToken_Handler,
		},
		{
			MethodName: "RefreshSNSAccessToken",
			Handler:    _OapiWarpper_RefreshSNSAccessToken_Handler,
		},
		{
			MethodName: "DingTalkConfig",
			Handler:    _OapiWarpper_DingTalkConfig_Handler,
		},
		{
			MethodName: "SnsGetPersistentCode",
			Handler:    _OapiWarpper_SnsGetPersistentCode_Handler,
		},
		{
			MethodName: "SnsGetSnsToken",
			Handler:    _OapiWarpper_SnsGetSnsToken_Handler,
		},
		{
			MethodName: "SnsGetUserInfo",
			Handler:    _OapiWarpper_SnsGetUserInfo_Handler,
		},
		{
			MethodName: "SnsAuthorize",
			Handler:    _OapiWarpper_SnsAuthorize_Handler,
		},
		{
			MethodName: "Qrconnect",
			Handler:    _OapiWarpper_Qrconnect_Handler,
		},
		{
			MethodName: "UserIdByCode",
			Handler:    _OapiWarpper_UserIdByCode_Handler,
		},
		{
			MethodName: "UserIdByUnionId",
			Handler:    _OapiWarpper_UserIdByUnionId_Handler,
		},
		{
			MethodName: "UserInfoByUserId",
			Handler:    _OapiWarpper_UserInfoByUserId_Handler,
		},
		{
			MethodName: "UserSimpleList",
			Handler:    _OapiWarpper_UserSimpleList_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _OapiWarpper_UserList_Handler,
		},
		{
			MethodName: "UserAdminList",
			Handler:    _OapiWarpper_UserAdminList_Handler,
		},
		{
			MethodName: "UserCanAccessMicroapp",
			Handler:    _OapiWarpper_UserCanAccessMicroapp_Handler,
		},
		{
			MethodName: "UserCreate",
			Handler:    _OapiWarpper_UserCreate_Handler,
		},
		{
			MethodName: "UserUpdate",
			Handler:    _OapiWarpper_UserUpdate_Handler,
		},
		{
			MethodName: "UserDelete",
			Handler:    _OapiWarpper_UserDelete_Handler,
		},
		{
			MethodName: "UserBatchDelete",
			Handler:    _OapiWarpper_UserBatchDelete_Handler,
		},
		{
			MethodName: "UserGetOrgUserCount",
			Handler:    _OapiWarpper_UserGetOrgUserCount_Handler,
		},
		{
			MethodName: "SubDepartmentList",
			Handler:    _OapiWarpper_SubDepartmentList_Handler,
		},
		{
			MethodName: "DepartmentList",
			Handler:    _OapiWarpper_DepartmentList_Handler,
		},
		{
			MethodName: "DepartmentDetail",
			Handler:    _OapiWarpper_DepartmentDetail_Handler,
		},
		{
			MethodName: "DepartmentCreate",
			Handler:    _OapiWarpper_DepartmentCreate_Handler,
		},
		{
			MethodName: "DepartmentUpdate",
			Handler:    _OapiWarpper_DepartmentUpdate_Handler,
		},
		{
			MethodName: "DepartmentDelete",
			Handler:    _OapiWarpper_DepartmentDelete_Handler,
		},
		{
			MethodName: "DepartmentListParentDeptsByDept",
			Handler:    _OapiWarpper_DepartmentListParentDeptsByDept_Handler,
		},
		{
			MethodName: "DepartmentListParentDepts",
			Handler:    _OapiWarpper_DepartmentListParentDepts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "oapi.proto",
}

func init() { proto.RegisterFile("oapi.proto", fileDescriptor_oapi_c2aec854c8b5519d) }

var fileDescriptor_oapi_c2aec854c8b5519d = []byte{
	// 705 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x96, 0x4b, 0x6f, 0x13, 0x31,
	0x14, 0x85, 0x0b, 0x42, 0x88, 0xba, 0x0f, 0x5a, 0x43, 0x5b, 0x9a, 0xbe, 0x68, 0x90, 0x60, 0x03,
	0xa9, 0x04, 0x4b, 0x24, 0xa4, 0x3c, 0xa0, 0x14, 0x11, 0x5a, 0x3a, 0x2d, 0x48, 0x08, 0x09, 0x4d,
	0x26, 0x37, 0xa9, 0xd5, 0x8c, 0x6d, 0x6c, 0x67, 0x11, 0x56, 0xfc, 0x1e, 0x7e, 0x20, 0x6b, 0x34,
	0x1e, 0xdb, 0xf1, 0xbc, 0x92, 0x4a, 0xac, 0x3a, 0x3d, 0xe7, 0xdc, 0xcf, 0x77, 0xec, 0xeb, 0x24,
	0x08, 0xb1, 0x90, 0x93, 0x06, 0x17, 0x4c, 0x31, 0x7c, 0x27, 0x79, 0xae, 0xed, 0x0c, 0x19, 0x1b,
	0x8e, 0xe0, 0x48, 0x6b, 0xbd, 0xf1, 0xe0, 0x08, 0x62, 0xae, 0x26, 0x69, 0xa4, 0xb6, 0x1c, 0xb1,
	0x38, 0x66, 0xd4, 0xfc, 0x87, 0xc6, 0x12, 0x84, 0x79, 0x5e, 0xeb, 0x03, 0x0f, 0x85, 0x8a, 0x81,
	0x2a, 0xa3, 0x2c, 0x4a, 0x2a, 0xd3, 0xc7, 0x97, 0x7f, 0xd7, 0xd1, 0xd2, 0x69, 0xc8, 0xc9, 0xd7,
	0x50, 0x70, 0x0e, 0x02, 0x77, 0xd1, 0xf6, 0x39, 0x0c, 0x04, 0xc8, 0xab, 0x36, 0x8b, 0x79, 0x48,
	0x27, 0xcd, 0x28, 0x02, 0x29, 0x2f, 0xd8, 0x35, 0x50, 0xbc, 0xd9, 0x48, 0x3b, 0x68, 0xd8, 0x0e,
	0x1a, 0x6f, 0x93, 0x0e, 0x6a, 0x15, 0x7a, 0x7d, 0x01, 0x9f, 0xa0, 0x0d, 0x83, 0x0b, 0x3e, 0x05,
	0xff, 0x87, 0xea, 0xa2, 0xd5, 0x0e, 0xa1, 0xc3, 0x8b, 0x70, 0x74, 0xdd, 0x66, 0x74, 0x40, 0x86,
	0x78, 0xa7, 0xa1, 0xb7, 0x28, 0xab, 0x9e, 0xc3, 0xcf, 0x31, 0x48, 0x55, 0xdb, 0x2d, 0x37, 0x25,
	0x67, 0x54, 0x42, 0x7d, 0x01, 0xff, 0x40, 0x0f, 0x03, 0x2a, 0x8f, 0x41, 0x9d, 0x81, 0x90, 0x44,
	0x2a, 0xa0, 0xaa, 0xcd, 0xfa, 0x80, 0x0f, 0xd3, 0xba, 0x32, 0xcf, 0xa2, 0xeb, 0xb3, 0x22, 0x6e,
	0x81, 0x2e, 0x5a, 0x4d, 0x13, 0x01, 0x35, 0xef, 0xbc, 0xe3, 0xd7, 0x59, 0x35, 0xd7, 0x6f, 0xde,
	0x2c, 0xe2, 0x2e, 0x25, 0x88, 0x13, 0x3a, 0x60, 0x59, 0x9c, 0x55, 0x4b, 0x71, 0x53, 0xd3, 0xe1,
	0x8e, 0xd1, 0x72, 0x40, 0x65, 0x73, 0xac, 0xae, 0x98, 0x20, 0xbf, 0x00, 0x6f, 0xbb, 0xbc, 0xd3,
	0x2c, 0xaa, 0x56, 0x66, 0x39, 0xd0, 0x1b, 0xb4, 0xf8, 0x59, 0x44, 0x8c, 0x52, 0x88, 0x14, 0xde,
	0x4c, 0xa3, 0x4e, 0xb0, 0x88, 0xad, 0x82, 0xee, 0x37, 0xa2, 0xdb, 0xeb, 0xb7, 0x26, 0x7a, 0xff,
	0x4d, 0x23, 0xbe, 0x96, 0x6b, 0x24, 0x6b, 0x39, 0xd0, 0x19, 0xba, 0x6f, 0x9d, 0x4b, 0x4a, 0x18,
	0x3d, 0xe9, 0xe3, 0xdd, 0x6c, 0x81, 0x91, 0x2d, 0x6e, 0xaf, 0xc2, 0x75, 0xc4, 0x00, 0xad, 0xd9,
	0x9d, 0x6b, 0x4d, 0xd2, 0x18, 0xf6, 0x8b, 0x3c, 0xdd, 0x32, 0xf7, 0xab, 0x6c, 0xff, 0x1c, 0x13,
	0x2d, 0x20, 0x31, 0x1f, 0xc1, 0x47, 0x22, 0x95, 0x3d, 0xc7, 0xac, 0x9a, 0x3b, 0xc7, 0xbc, 0xe9,
	0x70, 0xaf, 0xd1, 0xbd, 0xc4, 0xd3, 0xa0, 0x8d, 0x69, 0xd6, 0x47, 0x6c, 0xe6, 0x65, 0x57, 0xfc,
	0x0e, 0xad, 0x24, 0x6a, 0xb3, 0x1f, 0x13, 0xaa, 0x09, 0x55, 0xb7, 0xd2, 0x6b, 0xd1, 0x85, 0x3d,
	0x4e, 0x0f, 0x6d, 0x24, 0x56, 0x3b, 0xa4, 0xe9, 0x15, 0xef, 0x92, 0x48, 0xb0, 0x90, 0x73, 0x5c,
	0x9f, 0xd6, 0x15, 0x4c, 0xdb, 0xde, 0x93, 0x99, 0x19, 0xb7, 0x46, 0x13, 0x21, 0x1d, 0x11, 0x10,
	0x2a, 0xc0, 0x5b, 0x5e, 0x91, 0x56, 0x2c, 0xed, 0x51, 0xd1, 0xf0, 0x46, 0x55, 0x23, 0x2e, 0x79,
	0x3f, 0x87, 0x48, 0x15, 0x8b, 0x30, 0xdb, 0x78, 0xca, 0x81, 0x36, 0x39, 0x29, 0xd6, 0x77, 0x60,
	0x04, 0xd9, 0xfa, 0x54, 0x99, 0x5b, 0xff, 0x3e, 0x9d, 0xd0, 0x56, 0xa8, 0xa2, 0x2b, 0x03, 0xf1,
	0x8e, 0xd7, 0x93, 0xe7, 0x92, 0xbe, 0xa3, 0x07, 0x49, 0xc9, 0x31, 0xa8, 0x53, 0x31, 0xd4, 0xef,
	0xca, 0xc6, 0x54, 0xe1, 0xc7, 0x53, 0x5a, 0xce, 0xb2, 0xc4, 0xc3, 0x19, 0x09, 0x47, 0xff, 0x82,
	0xd6, 0x83, 0x71, 0xaf, 0xe3, 0xbe, 0x35, 0xf4, 0x68, 0x98, 0xc9, 0x2e, 0x18, 0x96, 0x7c, 0x50,
	0xe9, 0xfb, 0xa3, 0x9f, 0x83, 0xda, 0x4f, 0xf0, 0x52, 0xe2, 0x6e, 0xb9, 0xe9, 0x5f, 0xcf, 0xa9,
	0xd7, 0x01, 0x15, 0x92, 0x91, 0xbd, 0x9e, 0x79, 0x3d, 0x77, 0x3d, 0x8b, 0x76, 0x39, 0xd4, 0x0c,
	0x5b, 0x01, 0x9a, 0x1d, 0xb9, 0xfd, 0x2a, 0xbb, 0x1c, 0x6a, 0xc6, 0xaf, 0x00, 0xcd, 0x0e, 0xe1,
	0x7e, 0x95, 0xed, 0xa0, 0x1f, 0xb2, 0xaf, 0xaf, 0xc7, 0xa9, 0xe4, 0xf5, 0x6f, 0x34, 0x4f, 0xbf,
	0x6f, 0xa1, 0x83, 0xec, 0x3e, 0x9f, 0x85, 0x42, 0x97, 0x73, 0x25, 0x5b, 0x93, 0xe4, 0x0f, 0x7e,
	0x5e, 0x76, 0x1c, 0x85, 0x98, 0x5d, 0xea, 0xc5, 0x0d, 0xd3, 0xae, 0x05, 0x8a, 0xb6, 0x2b, 0xc3,
	0xf8, 0xe9, 0x1c, 0x9a, 0x5d, 0xf5, 0xd9, 0xdc, 0x9c, 0x5d, 0xaf, 0xb5, 0xf7, 0x6d, 0x49, 0x7f,
	0xc8, 0xc9, 0xa3, 0xa4, 0xe4, 0xcf, 0xed, 0x15, 0xfb, 0x4b, 0xa1, 0x91, 0xfc, 0x1c, 0xea, 0xdd,
	0xd5, 0xe6, 0xab, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xf3, 0xa8, 0x4e, 0x86, 0x09, 0x00,
	0x00,
}
