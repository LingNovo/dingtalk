// Code generated by protoc-gen-go. DO NOT EDIT.
// source: department.proto

package oapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 获取子部门ID列表请求参数
type SubDepartmentListRequest struct {
	// 父部门id(如果不传，默认部门为根部门，根部门ID为1)
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubDepartmentListRequest) Reset()         { *m = SubDepartmentListRequest{} }
func (m *SubDepartmentListRequest) String() string { return proto.CompactTextString(m) }
func (*SubDepartmentListRequest) ProtoMessage()    {}
func (*SubDepartmentListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{0}
}
func (m *SubDepartmentListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubDepartmentListRequest.Unmarshal(m, b)
}
func (m *SubDepartmentListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubDepartmentListRequest.Marshal(b, m, deterministic)
}
func (dst *SubDepartmentListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubDepartmentListRequest.Merge(dst, src)
}
func (m *SubDepartmentListRequest) XXX_Size() int {
	return xxx_messageInfo_SubDepartmentListRequest.Size(m)
}
func (m *SubDepartmentListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubDepartmentListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubDepartmentListRequest proto.InternalMessageInfo

func (m *SubDepartmentListRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 获取子部门ID列表响应参数
type SubDepartmentListResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode,proto3" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	// 子部门ID列表数据
	SubDeptIdList        []int64  `protobuf:"varint,3,rep,packed,name=sub_dept_id_list,json=subDeptIdList,proto3" json:"sub_dept_id_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubDepartmentListResponse) Reset()         { *m = SubDepartmentListResponse{} }
func (m *SubDepartmentListResponse) String() string { return proto.CompactTextString(m) }
func (*SubDepartmentListResponse) ProtoMessage()    {}
func (*SubDepartmentListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{1}
}
func (m *SubDepartmentListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubDepartmentListResponse.Unmarshal(m, b)
}
func (m *SubDepartmentListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubDepartmentListResponse.Marshal(b, m, deterministic)
}
func (dst *SubDepartmentListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubDepartmentListResponse.Merge(dst, src)
}
func (m *SubDepartmentListResponse) XXX_Size() int {
	return xxx_messageInfo_SubDepartmentListResponse.Size(m)
}
func (m *SubDepartmentListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubDepartmentListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubDepartmentListResponse proto.InternalMessageInfo

func (m *SubDepartmentListResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *SubDepartmentListResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *SubDepartmentListResponse) GetSubDeptIdList() []int64 {
	if m != nil {
		return m.SubDeptIdList
	}
	return nil
}

// 获取部门列表请求参数
type DepartmentListRequest struct {
	// 通讯录语言(默认zh_CN，未来会支持en_US)
	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	// 是否递归部门的全部子部门，ISV微应用固定传递false。
	FetchChild bool `protobuf:"varint,2,opt,name=fetch_child,json=fetchChild,proto3" json:"fetch_child,omitempty"`
	// 父部门id(如果不传，默认部门为根部门，根部门ID为1)
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentListRequest) Reset()         { *m = DepartmentListRequest{} }
func (m *DepartmentListRequest) String() string { return proto.CompactTextString(m) }
func (*DepartmentListRequest) ProtoMessage()    {}
func (*DepartmentListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{2}
}
func (m *DepartmentListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentListRequest.Unmarshal(m, b)
}
func (m *DepartmentListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentListRequest.Marshal(b, m, deterministic)
}
func (dst *DepartmentListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentListRequest.Merge(dst, src)
}
func (m *DepartmentListRequest) XXX_Size() int {
	return xxx_messageInfo_DepartmentListRequest.Size(m)
}
func (m *DepartmentListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentListRequest proto.InternalMessageInfo

func (m *DepartmentListRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *DepartmentListRequest) GetFetchChild() bool {
	if m != nil {
		return m.FetchChild
	}
	return false
}

func (m *DepartmentListRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 部门列表数据。以部门的order字段从小到大排列
type Department struct {
	// 部门id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 部门名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 父部门id，根部门为1
	Parentid int64 `protobuf:"varint,3,opt,name=parentid,proto3" json:"parentid,omitempty"`
	// 是否同步创建一个关联此部门的企业群, true表示是, false表示不是
	CreateDeptGroup bool `protobuf:"varint,4,opt,name=createDeptGroup,proto3" json:"createDeptGroup,omitempty"`
	// 当群已经创建后，是否有新人加入部门会自动加入该群, true表示是, false表示不是
	AutoAddUser          bool     `protobuf:"varint,5,opt,name=autoAddUser,proto3" json:"autoAddUser,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Department) Reset()         { *m = Department{} }
func (m *Department) String() string { return proto.CompactTextString(m) }
func (*Department) ProtoMessage()    {}
func (*Department) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{3}
}
func (m *Department) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Department.Unmarshal(m, b)
}
func (m *Department) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Department.Marshal(b, m, deterministic)
}
func (dst *Department) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Department.Merge(dst, src)
}
func (m *Department) XXX_Size() int {
	return xxx_messageInfo_Department.Size(m)
}
func (m *Department) XXX_DiscardUnknown() {
	xxx_messageInfo_Department.DiscardUnknown(m)
}

var xxx_messageInfo_Department proto.InternalMessageInfo

func (m *Department) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Department) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Department) GetParentid() int64 {
	if m != nil {
		return m.Parentid
	}
	return 0
}

func (m *Department) GetCreateDeptGroup() bool {
	if m != nil {
		return m.CreateDeptGroup
	}
	return false
}

func (m *Department) GetAutoAddUser() bool {
	if m != nil {
		return m.AutoAddUser
	}
	return false
}

// 获取部门列表响应参数
type DepartmentListResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode,proto3" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	// 部门列表数据。以部门的order字段从小到大排列
	Department           *Department `protobuf:"bytes,3,opt,name=department,proto3" json:"department,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *DepartmentListResponse) Reset()         { *m = DepartmentListResponse{} }
func (m *DepartmentListResponse) String() string { return proto.CompactTextString(m) }
func (*DepartmentListResponse) ProtoMessage()    {}
func (*DepartmentListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{4}
}
func (m *DepartmentListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentListResponse.Unmarshal(m, b)
}
func (m *DepartmentListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentListResponse.Marshal(b, m, deterministic)
}
func (dst *DepartmentListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentListResponse.Merge(dst, src)
}
func (m *DepartmentListResponse) XXX_Size() int {
	return xxx_messageInfo_DepartmentListResponse.Size(m)
}
func (m *DepartmentListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentListResponse proto.InternalMessageInfo

func (m *DepartmentListResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *DepartmentListResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *DepartmentListResponse) GetDepartment() *Department {
	if m != nil {
		return m.Department
	}
	return nil
}

// 获取部门详情请求参数
type DepartmentDetailRequest struct {
	// 部门id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 通讯录语言(默认zh_CN，未来会支持en_US)
	Lang                 string   `protobuf:"bytes,2,opt,name=lang,proto3" json:"lang,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentDetailRequest) Reset()         { *m = DepartmentDetailRequest{} }
func (m *DepartmentDetailRequest) String() string { return proto.CompactTextString(m) }
func (*DepartmentDetailRequest) ProtoMessage()    {}
func (*DepartmentDetailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{5}
}
func (m *DepartmentDetailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentDetailRequest.Unmarshal(m, b)
}
func (m *DepartmentDetailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentDetailRequest.Marshal(b, m, deterministic)
}
func (dst *DepartmentDetailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentDetailRequest.Merge(dst, src)
}
func (m *DepartmentDetailRequest) XXX_Size() int {
	return xxx_messageInfo_DepartmentDetailRequest.Size(m)
}
func (m *DepartmentDetailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentDetailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentDetailRequest proto.InternalMessageInfo

func (m *DepartmentDetailRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DepartmentDetailRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

// 获取部门详情响应参数
type DepartmentDetailResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode,proto3" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	// 部门id
	Id int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	// 部门名称
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// 父部门id，根部门为1
	Parentid int64 `protobuf:"varint,5,opt,name=parentid,proto3" json:"parentid,omitempty"`
	// 在父部门中的次序值
	Order int64 `protobuf:"varint,6,opt,name=order,proto3" json:"order,omitempty"`
	// 是否同步创建一个关联此部门的企业群, true表示是, false表示不是
	CreateDeptGroup bool `protobuf:"varint,7,opt,name=createDeptGroup,proto3" json:"createDeptGroup,omitempty"`
	// 当群已经创建后，是否有新人加入部门会自动加入该群, true表示是, false表示不是
	AutoAddUser bool `protobuf:"varint,8,opt,name=autoAddUser,proto3" json:"autoAddUser,omitempty"`
	// 是否隐藏部门, true表示隐藏, false表示显示
	DeptHiding bool `protobuf:"varint,9,opt,name=deptHiding,proto3" json:"deptHiding,omitempty"`
	// 可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用|符号进行分割
	DeptPermits string `protobuf:"bytes,10,opt,name=deptPermits,proto3" json:"deptPermits,omitempty"`
	// 可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用|符号进行分割
	UserPermits string `protobuf:"bytes,11,opt,name=userPermits,proto3" json:"userPermits,omitempty"`
	// 是否本部门的员工仅可见员工自己, 为true时，本部门员工默认只能看到员工自己
	OuterDept bool `protobuf:"varint,12,opt,name=outerDept,proto3" json:"outerDept,omitempty"`
	// 本部门的员工仅可见员工自己为true时，可以配置额外可见部门，值为部门id组成的的字符串，使用|符号进行分割
	OuterPermitDepts string `protobuf:"bytes,13,opt,name=outerPermitDepts,proto3" json:"outerPermitDepts,omitempty"`
	// 本部门的员工仅可见员工自己为true时，可以配置额外可见人员，值为userid组成的的字符串，使用| 符号进行分割
	OuterPermitUsers string `protobuf:"bytes,14,opt,name=outerPermitUsers,proto3" json:"outerPermitUsers,omitempty"`
	// 企业群群主
	OrgDeptOwner string `protobuf:"bytes,15,opt,name=orgDeptOwner,proto3" json:"orgDeptOwner,omitempty"`
	// 部门的主管列表,取值为由主管的userid组成的字符串，不同的userid使用|符号进行分割
	DeptManagerUseridList string `protobuf:"bytes,16,opt,name=deptManagerUseridList,proto3" json:"deptManagerUseridList,omitempty"`
	// 部门标识字段，开发者可用该字段来唯一标识一个部门，并与钉钉外部通讯录里的部门做映射
	SourceIdentifier string `protobuf:"bytes,17,opt,name=sourceIdentifier,proto3" json:"sourceIdentifier,omitempty"`
	// 部门群是否包含子部门
	GroupContainSubDept  bool     `protobuf:"varint,18,opt,name=groupContainSubDept,proto3" json:"groupContainSubDept,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentDetailResponse) Reset()         { *m = DepartmentDetailResponse{} }
func (m *DepartmentDetailResponse) String() string { return proto.CompactTextString(m) }
func (*DepartmentDetailResponse) ProtoMessage()    {}
func (*DepartmentDetailResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{6}
}
func (m *DepartmentDetailResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentDetailResponse.Unmarshal(m, b)
}
func (m *DepartmentDetailResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentDetailResponse.Marshal(b, m, deterministic)
}
func (dst *DepartmentDetailResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentDetailResponse.Merge(dst, src)
}
func (m *DepartmentDetailResponse) XXX_Size() int {
	return xxx_messageInfo_DepartmentDetailResponse.Size(m)
}
func (m *DepartmentDetailResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentDetailResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentDetailResponse proto.InternalMessageInfo

func (m *DepartmentDetailResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *DepartmentDetailResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *DepartmentDetailResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DepartmentDetailResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DepartmentDetailResponse) GetParentid() int64 {
	if m != nil {
		return m.Parentid
	}
	return 0
}

func (m *DepartmentDetailResponse) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *DepartmentDetailResponse) GetCreateDeptGroup() bool {
	if m != nil {
		return m.CreateDeptGroup
	}
	return false
}

func (m *DepartmentDetailResponse) GetAutoAddUser() bool {
	if m != nil {
		return m.AutoAddUser
	}
	return false
}

func (m *DepartmentDetailResponse) GetDeptHiding() bool {
	if m != nil {
		return m.DeptHiding
	}
	return false
}

func (m *DepartmentDetailResponse) GetDeptPermits() string {
	if m != nil {
		return m.DeptPermits
	}
	return ""
}

func (m *DepartmentDetailResponse) GetUserPermits() string {
	if m != nil {
		return m.UserPermits
	}
	return ""
}

func (m *DepartmentDetailResponse) GetOuterDept() bool {
	if m != nil {
		return m.OuterDept
	}
	return false
}

func (m *DepartmentDetailResponse) GetOuterPermitDepts() string {
	if m != nil {
		return m.OuterPermitDepts
	}
	return ""
}

func (m *DepartmentDetailResponse) GetOuterPermitUsers() string {
	if m != nil {
		return m.OuterPermitUsers
	}
	return ""
}

func (m *DepartmentDetailResponse) GetOrgDeptOwner() string {
	if m != nil {
		return m.OrgDeptOwner
	}
	return ""
}

func (m *DepartmentDetailResponse) GetDeptManagerUseridList() string {
	if m != nil {
		return m.DeptManagerUseridList
	}
	return ""
}

func (m *DepartmentDetailResponse) GetSourceIdentifier() string {
	if m != nil {
		return m.SourceIdentifier
	}
	return ""
}

func (m *DepartmentDetailResponse) GetGroupContainSubDept() bool {
	if m != nil {
		return m.GroupContainSubDept
	}
	return false
}

// 创建部门请求参数
type DepartmentCreateRequest struct {
	// 部门名称。长度限制为1~64个字符。不允许包含字符‘-’‘，’以及‘,’。
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 父部门id。根部门id为1
	Parentid int64 `protobuf:"varint,2,opt,name=parentid,proto3" json:"parentid,omitempty"`
	// 在父部门中的次序值，order值小的排序靠前。
	Order string `protobuf:"bytes,3,opt,name=order,proto3" json:"order,omitempty"`
	// 是否创建一个关联此部门的企业群，默认为false
	CreateDeptGroup bool `protobuf:"varint,4,opt,name=createDeptGroup,proto3" json:"createDeptGroup,omitempty"`
	// 是否隐藏部门, true表示隐藏, false表示显示
	DeptHiding bool `protobuf:"varint,5,opt,name=deptHiding,proto3" json:"deptHiding,omitempty"`
	// 可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用 | 符号进行分割。总数不能超过200。
	DeptPerimits string `protobuf:"bytes,6,opt,name=deptPerimits,proto3" json:"deptPerimits,omitempty"`
	// 可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用| 符号进行分割。总数不能超过200。
	UserPerimits string `protobuf:"bytes,7,opt,name=userPerimits,proto3" json:"userPerimits,omitempty"`
	// 是否本部门的员工仅可见员工自己, 为true时，本部门员工默认只能看到员工自己
	OuterDept bool `protobuf:"varint,8,opt,name=outerDept,proto3" json:"outerDept,omitempty"`
	// 本部门的员工仅可见员工自己为true时，可以配置额外可见部门，值为部门id组成的的字符串，使用|符号进行分割。总数不能超过200。
	OuterPermitDepts string `protobuf:"bytes,9,opt,name=outerPermitDepts,proto3" json:"outerPermitDepts,omitempty"`
	// 本部门的员工仅可见员工自己为true时，可以配置额外可见人员，值为userid组成的的字符串，使用|符号进行分割。总数不能超过200。
	OuterPermitUsers string `protobuf:"bytes,10,opt,name=outerPermitUsers,proto3" json:"outerPermitUsers,omitempty"`
	// 部门标识字段，开发者可用该字段来唯一标识一个部门，并与钉钉外部通讯录里的部门做映射
	SourceIdentifier     string   `protobuf:"bytes,11,opt,name=sourceIdentifier,proto3" json:"sourceIdentifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentCreateRequest) Reset()         { *m = DepartmentCreateRequest{} }
func (m *DepartmentCreateRequest) String() string { return proto.CompactTextString(m) }
func (*DepartmentCreateRequest) ProtoMessage()    {}
func (*DepartmentCreateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{7}
}
func (m *DepartmentCreateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentCreateRequest.Unmarshal(m, b)
}
func (m *DepartmentCreateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentCreateRequest.Marshal(b, m, deterministic)
}
func (dst *DepartmentCreateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentCreateRequest.Merge(dst, src)
}
func (m *DepartmentCreateRequest) XXX_Size() int {
	return xxx_messageInfo_DepartmentCreateRequest.Size(m)
}
func (m *DepartmentCreateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentCreateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentCreateRequest proto.InternalMessageInfo

func (m *DepartmentCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DepartmentCreateRequest) GetParentid() int64 {
	if m != nil {
		return m.Parentid
	}
	return 0
}

func (m *DepartmentCreateRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *DepartmentCreateRequest) GetCreateDeptGroup() bool {
	if m != nil {
		return m.CreateDeptGroup
	}
	return false
}

func (m *DepartmentCreateRequest) GetDeptHiding() bool {
	if m != nil {
		return m.DeptHiding
	}
	return false
}

func (m *DepartmentCreateRequest) GetDeptPerimits() string {
	if m != nil {
		return m.DeptPerimits
	}
	return ""
}

func (m *DepartmentCreateRequest) GetUserPerimits() string {
	if m != nil {
		return m.UserPerimits
	}
	return ""
}

func (m *DepartmentCreateRequest) GetOuterDept() bool {
	if m != nil {
		return m.OuterDept
	}
	return false
}

func (m *DepartmentCreateRequest) GetOuterPermitDepts() string {
	if m != nil {
		return m.OuterPermitDepts
	}
	return ""
}

func (m *DepartmentCreateRequest) GetOuterPermitUsers() string {
	if m != nil {
		return m.OuterPermitUsers
	}
	return ""
}

func (m *DepartmentCreateRequest) GetSourceIdentifier() string {
	if m != nil {
		return m.SourceIdentifier
	}
	return ""
}

// 创建部门响应参数
type DepartmentCreateResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode,proto3" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	// 创建的部门id
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentCreateResponse) Reset()         { *m = DepartmentCreateResponse{} }
func (m *DepartmentCreateResponse) String() string { return proto.CompactTextString(m) }
func (*DepartmentCreateResponse) ProtoMessage()    {}
func (*DepartmentCreateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{8}
}
func (m *DepartmentCreateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentCreateResponse.Unmarshal(m, b)
}
func (m *DepartmentCreateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentCreateResponse.Marshal(b, m, deterministic)
}
func (dst *DepartmentCreateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentCreateResponse.Merge(dst, src)
}
func (m *DepartmentCreateResponse) XXX_Size() int {
	return xxx_messageInfo_DepartmentCreateResponse.Size(m)
}
func (m *DepartmentCreateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentCreateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentCreateResponse proto.InternalMessageInfo

func (m *DepartmentCreateResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *DepartmentCreateResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *DepartmentCreateResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 更新部门请求参数
type DepartmentUpdateRequest struct {
	// 通讯录语言(默认zh_CN另外支持en_US)
	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
	// 部门名称。长度限制为1~64个字符。不允许包含字符‘-’‘，’以及‘,’。
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 父部门id。根部门id为1
	Parentid int64 `protobuf:"varint,3,opt,name=parentid,proto3" json:"parentid,omitempty"`
	// 在父部门中的次序值。order值小的排序靠前
	Order string `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty"`
	// 部门id
	Id int64 `protobuf:"varint,5,opt,name=id,proto3" json:"id,omitempty"`
	// 是否创建一个关联此部门的企业群
	CreateDeptGroup bool `protobuf:"varint,6,opt,name=createDeptGroup,proto3" json:"createDeptGroup,omitempty"`
	// 如果有新人加入部门是否会自动加入部门群
	AutoAddUser bool `protobuf:"varint,7,opt,name=autoAddUser,proto3" json:"autoAddUser,omitempty"`
	// 部门的主管列表,取值为由主管的userid组成的字符串，不同的userid使用’| 符号进行分割
	DeptManagerUseridList string `protobuf:"bytes,8,opt,name=deptManagerUseridList,proto3" json:"deptManagerUseridList,omitempty"`
	// 是否隐藏部门, true表示隐藏, false表示显示
	DeptHiding bool `protobuf:"varint,9,opt,name=deptHiding,proto3" json:"deptHiding,omitempty"`
	// 可以查看指定隐藏部门的其他部门列表，如果部门隐藏，则此值生效，取值为其他的部门id组成的的字符串，使用 | 符号进行分割。总数不能超过200。
	DeptPerimits string `protobuf:"bytes,10,opt,name=deptPerimits,proto3" json:"deptPerimits,omitempty"`
	// 可以查看指定隐藏部门的其他人员列表，如果部门隐藏，则此值生效，取值为其他的人员userid组成的的字符串，使用| 符号进行分割。总数不能超过200。
	UserPerimits string `protobuf:"bytes,11,opt,name=userPerimits,proto3" json:"userPerimits,omitempty"`
	// 是否本部门的员工仅可见员工自己, 为true时，本部门员工默认只能看到员工自己
	OuterDept bool `protobuf:"varint,12,opt,name=outerDept,proto3" json:"outerDept,omitempty"`
	// 本部门的员工仅可见员工自己为true时，可以配置额外可见部门，值为部门id组成的的字符串，使用|符号进行分割。总数不能超过200。
	OuterPermitDepts string `protobuf:"bytes,13,opt,name=outerPermitDepts,proto3" json:"outerPermitDepts,omitempty"`
	// 本部门的员工仅可见员工自己为true时，可以配置额外可见人员，值为userid组成的的字符串，使用|符号进行分割。总数不能超过200。
	OuterPermitUsers string `protobuf:"bytes,14,opt,name=outerPermitUsers,proto3" json:"outerPermitUsers,omitempty"`
	// 企业群群主
	OrgDeptOwner string `protobuf:"bytes,15,opt,name=orgDeptOwner,proto3" json:"orgDeptOwner,omitempty"`
	// 部门标识字段，开发者可用该字段来唯一标识一个部门，并与钉钉外部通讯录里的部门做映射
	SourceIdentifier     string   `protobuf:"bytes,16,opt,name=sourceIdentifier,proto3" json:"sourceIdentifier,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentUpdateRequest) Reset()         { *m = DepartmentUpdateRequest{} }
func (m *DepartmentUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*DepartmentUpdateRequest) ProtoMessage()    {}
func (*DepartmentUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{9}
}
func (m *DepartmentUpdateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentUpdateRequest.Unmarshal(m, b)
}
func (m *DepartmentUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentUpdateRequest.Marshal(b, m, deterministic)
}
func (dst *DepartmentUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentUpdateRequest.Merge(dst, src)
}
func (m *DepartmentUpdateRequest) XXX_Size() int {
	return xxx_messageInfo_DepartmentUpdateRequest.Size(m)
}
func (m *DepartmentUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentUpdateRequest proto.InternalMessageInfo

func (m *DepartmentUpdateRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *DepartmentUpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DepartmentUpdateRequest) GetParentid() int64 {
	if m != nil {
		return m.Parentid
	}
	return 0
}

func (m *DepartmentUpdateRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *DepartmentUpdateRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DepartmentUpdateRequest) GetCreateDeptGroup() bool {
	if m != nil {
		return m.CreateDeptGroup
	}
	return false
}

func (m *DepartmentUpdateRequest) GetAutoAddUser() bool {
	if m != nil {
		return m.AutoAddUser
	}
	return false
}

func (m *DepartmentUpdateRequest) GetDeptManagerUseridList() string {
	if m != nil {
		return m.DeptManagerUseridList
	}
	return ""
}

func (m *DepartmentUpdateRequest) GetDeptHiding() bool {
	if m != nil {
		return m.DeptHiding
	}
	return false
}

func (m *DepartmentUpdateRequest) GetDeptPerimits() string {
	if m != nil {
		return m.DeptPerimits
	}
	return ""
}

func (m *DepartmentUpdateRequest) GetUserPerimits() string {
	if m != nil {
		return m.UserPerimits
	}
	return ""
}

func (m *DepartmentUpdateRequest) GetOuterDept() bool {
	if m != nil {
		return m.OuterDept
	}
	return false
}

func (m *DepartmentUpdateRequest) GetOuterPermitDepts() string {
	if m != nil {
		return m.OuterPermitDepts
	}
	return ""
}

func (m *DepartmentUpdateRequest) GetOuterPermitUsers() string {
	if m != nil {
		return m.OuterPermitUsers
	}
	return ""
}

func (m *DepartmentUpdateRequest) GetOrgDeptOwner() string {
	if m != nil {
		return m.OrgDeptOwner
	}
	return ""
}

func (m *DepartmentUpdateRequest) GetSourceIdentifier() string {
	if m != nil {
		return m.SourceIdentifier
	}
	return ""
}

// 更新部门响应参数
type DepartmentUpdateResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode,proto3" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	// 已经更新的部门id
	Id                   int64    `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentUpdateResponse) Reset()         { *m = DepartmentUpdateResponse{} }
func (m *DepartmentUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*DepartmentUpdateResponse) ProtoMessage()    {}
func (*DepartmentUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{10}
}
func (m *DepartmentUpdateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentUpdateResponse.Unmarshal(m, b)
}
func (m *DepartmentUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentUpdateResponse.Marshal(b, m, deterministic)
}
func (dst *DepartmentUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentUpdateResponse.Merge(dst, src)
}
func (m *DepartmentUpdateResponse) XXX_Size() int {
	return xxx_messageInfo_DepartmentUpdateResponse.Size(m)
}
func (m *DepartmentUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentUpdateResponse proto.InternalMessageInfo

func (m *DepartmentUpdateResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *DepartmentUpdateResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *DepartmentUpdateResponse) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 更新部门请求参数
type DepartmentDeleteRequest struct {
	// 部门id。（注：不能删除根部门；不能删除含有子部门、成员的部门）
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentDeleteRequest) Reset()         { *m = DepartmentDeleteRequest{} }
func (m *DepartmentDeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DepartmentDeleteRequest) ProtoMessage()    {}
func (*DepartmentDeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{11}
}
func (m *DepartmentDeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentDeleteRequest.Unmarshal(m, b)
}
func (m *DepartmentDeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentDeleteRequest.Marshal(b, m, deterministic)
}
func (dst *DepartmentDeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentDeleteRequest.Merge(dst, src)
}
func (m *DepartmentDeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DepartmentDeleteRequest.Size(m)
}
func (m *DepartmentDeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentDeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentDeleteRequest proto.InternalMessageInfo

func (m *DepartmentDeleteRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 查询部门的所有上级父部门路径请求参数
type DepartmentListParentDeptsByDeptRequest struct {
	// 希望查询的部门的id，包含查询的部门本身
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentListParentDeptsByDeptRequest) Reset() {
	*m = DepartmentListParentDeptsByDeptRequest{}
}
func (m *DepartmentListParentDeptsByDeptRequest) String() string { return proto.CompactTextString(m) }
func (*DepartmentListParentDeptsByDeptRequest) ProtoMessage()    {}
func (*DepartmentListParentDeptsByDeptRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{12}
}
func (m *DepartmentListParentDeptsByDeptRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentListParentDeptsByDeptRequest.Unmarshal(m, b)
}
func (m *DepartmentListParentDeptsByDeptRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentListParentDeptsByDeptRequest.Marshal(b, m, deterministic)
}
func (dst *DepartmentListParentDeptsByDeptRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentListParentDeptsByDeptRequest.Merge(dst, src)
}
func (m *DepartmentListParentDeptsByDeptRequest) XXX_Size() int {
	return xxx_messageInfo_DepartmentListParentDeptsByDeptRequest.Size(m)
}
func (m *DepartmentListParentDeptsByDeptRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentListParentDeptsByDeptRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentListParentDeptsByDeptRequest proto.InternalMessageInfo

func (m *DepartmentListParentDeptsByDeptRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 查询部门的所有上级父部门路径响应参数
type DepartmentListParentDeptsByDeptResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode,proto3" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	// 该部门的所有父部门id列表
	ParentIds            []int64  `protobuf:"varint,3,rep,packed,name=parentIds,proto3" json:"parentIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentListParentDeptsByDeptResponse) Reset() {
	*m = DepartmentListParentDeptsByDeptResponse{}
}
func (m *DepartmentListParentDeptsByDeptResponse) String() string { return proto.CompactTextString(m) }
func (*DepartmentListParentDeptsByDeptResponse) ProtoMessage()    {}
func (*DepartmentListParentDeptsByDeptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{13}
}
func (m *DepartmentListParentDeptsByDeptResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentListParentDeptsByDeptResponse.Unmarshal(m, b)
}
func (m *DepartmentListParentDeptsByDeptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentListParentDeptsByDeptResponse.Marshal(b, m, deterministic)
}
func (dst *DepartmentListParentDeptsByDeptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentListParentDeptsByDeptResponse.Merge(dst, src)
}
func (m *DepartmentListParentDeptsByDeptResponse) XXX_Size() int {
	return xxx_messageInfo_DepartmentListParentDeptsByDeptResponse.Size(m)
}
func (m *DepartmentListParentDeptsByDeptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentListParentDeptsByDeptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentListParentDeptsByDeptResponse proto.InternalMessageInfo

func (m *DepartmentListParentDeptsByDeptResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *DepartmentListParentDeptsByDeptResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *DepartmentListParentDeptsByDeptResponse) GetParentIds() []int64 {
	if m != nil {
		return m.ParentIds
	}
	return nil
}

// 查询指定用户的所有上级父部门路径请求参数
type DepartmentListParentDeptsRequest struct {
	// 希望查询的用户的id
	UserId               string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentListParentDeptsRequest) Reset()         { *m = DepartmentListParentDeptsRequest{} }
func (m *DepartmentListParentDeptsRequest) String() string { return proto.CompactTextString(m) }
func (*DepartmentListParentDeptsRequest) ProtoMessage()    {}
func (*DepartmentListParentDeptsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{14}
}
func (m *DepartmentListParentDeptsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentListParentDeptsRequest.Unmarshal(m, b)
}
func (m *DepartmentListParentDeptsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentListParentDeptsRequest.Marshal(b, m, deterministic)
}
func (dst *DepartmentListParentDeptsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentListParentDeptsRequest.Merge(dst, src)
}
func (m *DepartmentListParentDeptsRequest) XXX_Size() int {
	return xxx_messageInfo_DepartmentListParentDeptsRequest.Size(m)
}
func (m *DepartmentListParentDeptsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentListParentDeptsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentListParentDeptsRequest proto.InternalMessageInfo

func (m *DepartmentListParentDeptsRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// 查询指定用户的所有上级父部门路径响应参数
type DepartmentListParentDeptsResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode,proto3" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg,proto3" json:"errmsg,omitempty"`
	// 该部门的所有父部门id列表
	Department           []int64  `protobuf:"varint,3,rep,packed,name=department,proto3" json:"department,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepartmentListParentDeptsResponse) Reset()         { *m = DepartmentListParentDeptsResponse{} }
func (m *DepartmentListParentDeptsResponse) String() string { return proto.CompactTextString(m) }
func (*DepartmentListParentDeptsResponse) ProtoMessage()    {}
func (*DepartmentListParentDeptsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_department_8c6b32859ddb86d4, []int{15}
}
func (m *DepartmentListParentDeptsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepartmentListParentDeptsResponse.Unmarshal(m, b)
}
func (m *DepartmentListParentDeptsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepartmentListParentDeptsResponse.Marshal(b, m, deterministic)
}
func (dst *DepartmentListParentDeptsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepartmentListParentDeptsResponse.Merge(dst, src)
}
func (m *DepartmentListParentDeptsResponse) XXX_Size() int {
	return xxx_messageInfo_DepartmentListParentDeptsResponse.Size(m)
}
func (m *DepartmentListParentDeptsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DepartmentListParentDeptsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DepartmentListParentDeptsResponse proto.InternalMessageInfo

func (m *DepartmentListParentDeptsResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *DepartmentListParentDeptsResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *DepartmentListParentDeptsResponse) GetDepartment() []int64 {
	if m != nil {
		return m.Department
	}
	return nil
}

func init() {
	proto.RegisterType((*SubDepartmentListRequest)(nil), "oapi.SubDepartmentListRequest")
	proto.RegisterType((*SubDepartmentListResponse)(nil), "oapi.SubDepartmentListResponse")
	proto.RegisterType((*DepartmentListRequest)(nil), "oapi.DepartmentListRequest")
	proto.RegisterType((*Department)(nil), "oapi.Department")
	proto.RegisterType((*DepartmentListResponse)(nil), "oapi.DepartmentListResponse")
	proto.RegisterType((*DepartmentDetailRequest)(nil), "oapi.DepartmentDetailRequest")
	proto.RegisterType((*DepartmentDetailResponse)(nil), "oapi.DepartmentDetailResponse")
	proto.RegisterType((*DepartmentCreateRequest)(nil), "oapi.DepartmentCreateRequest")
	proto.RegisterType((*DepartmentCreateResponse)(nil), "oapi.DepartmentCreateResponse")
	proto.RegisterType((*DepartmentUpdateRequest)(nil), "oapi.DepartmentUpdateRequest")
	proto.RegisterType((*DepartmentUpdateResponse)(nil), "oapi.DepartmentUpdateResponse")
	proto.RegisterType((*DepartmentDeleteRequest)(nil), "oapi.DepartmentDeleteRequest")
	proto.RegisterType((*DepartmentListParentDeptsByDeptRequest)(nil), "oapi.DepartmentListParentDeptsByDeptRequest")
	proto.RegisterType((*DepartmentListParentDeptsByDeptResponse)(nil), "oapi.DepartmentListParentDeptsByDeptResponse")
	proto.RegisterType((*DepartmentListParentDeptsRequest)(nil), "oapi.DepartmentListParentDeptsRequest")
	proto.RegisterType((*DepartmentListParentDeptsResponse)(nil), "oapi.DepartmentListParentDeptsResponse")
}

func init() { proto.RegisterFile("department.proto", fileDescriptor_department_8c6b32859ddb86d4) }

var fileDescriptor_department_8c6b32859ddb86d4 = []byte{
	// 788 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x96, 0xcf, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xd5, 0xdf, 0xed, 0xeb, 0x7e, 0x14, 0xc3, 0x86, 0x41, 0x63, 0x94, 0x1c, 0x58, 0xd9,
	0xa1, 0x4c, 0xc0, 0x01, 0x21, 0x71, 0x60, 0x9b, 0x04, 0x95, 0x40, 0x9b, 0x0a, 0xbb, 0xa0, 0x49,
	0x55, 0x56, 0x7b, 0x9d, 0x45, 0x9b, 0x04, 0xdb, 0x01, 0x4d, 0xe2, 0xc0, 0xff, 0xc0, 0x85, 0xbf,
	0x81, 0x2b, 0xff, 0x20, 0xf2, 0x4b, 0x9a, 0xa4, 0x69, 0xb2, 0x75, 0xd3, 0x0e, 0x9c, 0x5a, 0x7f,
	0xfd, 0x6c, 0x3f, 0xfb, 0xfb, 0xf1, 0x8b, 0xa1, 0xc5, 0xb8, 0x67, 0x4b, 0x3d, 0xe1, 0x8e, 0xee,
	0x7a, 0xd2, 0xd5, 0x2e, 0x29, 0xbb, 0xb6, 0x27, 0xac, 0x6d, 0xa0, 0x1f, 0xfd, 0x93, 0xfd, 0xa8,
	0xf3, 0xbd, 0x50, 0xba, 0xcf, 0xbf, 0xfa, 0x5c, 0x69, 0xb2, 0x02, 0x45, 0xc1, 0x68, 0xa1, 0x5d,
	0xe8, 0x94, 0xfa, 0x45, 0xc1, 0xac, 0x6f, 0x70, 0x2f, 0x23, 0x56, 0x79, 0xae, 0xa3, 0x38, 0xa1,
	0x50, 0xe3, 0x52, 0x0e, 0x5d, 0xc6, 0xc3, 0x11, 0xd3, 0x26, 0x59, 0x87, 0x2a, 0x97, 0x72, 0xa2,
	0x46, 0xb4, 0xd8, 0x2e, 0x74, 0x1a, 0xfd, 0xb0, 0x45, 0xb6, 0xa0, 0xa5, 0xfc, 0x93, 0x01, 0xe3,
	0x9e, 0x1e, 0x08, 0x36, 0x18, 0x0b, 0xa5, 0x69, 0xa9, 0x5d, 0xea, 0x94, 0xfa, 0xcb, 0x0a, 0x97,
	0xd1, 0x3d, 0x66, 0x96, 0xb0, 0x8e, 0x61, 0x2d, 0x3b, 0x41, 0x02, 0xe5, 0xb1, 0xed, 0x8c, 0x70,
	0xc1, 0x46, 0x1f, 0xff, 0x93, 0x87, 0xd0, 0x3c, 0xe5, 0x7a, 0x78, 0x36, 0x18, 0x9e, 0x89, 0x31,
	0xc3, 0x25, 0xeb, 0x7d, 0x40, 0x69, 0xcf, 0x28, 0xe1, 0xae, 0x4a, 0xd1, 0xae, 0x7e, 0x17, 0x00,
	0xe2, 0xe9, 0xd3, 0x9b, 0x36, 0x6b, 0x38, 0xf6, 0x84, 0x87, 0xb9, 0xe3, 0x7f, 0x72, 0x1f, 0xea,
	0x9e, 0x2d, 0xb9, 0xa3, 0xa3, 0x89, 0xa2, 0x36, 0xe9, 0xc0, 0xea, 0x50, 0x72, 0x5b, 0x73, 0xb3,
	0x81, 0xb7, 0xd2, 0xf5, 0x3d, 0x5a, 0xc6, 0x1c, 0xd2, 0x32, 0x69, 0x43, 0xd3, 0xf6, 0xb5, 0xfb,
	0x86, 0xb1, 0x23, 0xc5, 0x25, 0xad, 0x60, 0x54, 0x52, 0xb2, 0x7e, 0xc0, 0xfa, 0x8d, 0x9d, 0xf6,
	0x0e, 0x40, 0x8c, 0x00, 0x66, 0xdd, 0x7c, 0xd6, 0xea, 0x1a, 0x06, 0xba, 0xf1, 0x1a, 0xfd, 0x44,
	0x8c, 0xf5, 0x1a, 0xee, 0xc6, 0x3d, 0xfb, 0x5c, 0xdb, 0x62, 0x9c, 0x43, 0x46, 0x64, 0x44, 0x31,
	0x36, 0xc2, 0xfa, 0x59, 0x01, 0x3a, 0x3f, 0xfe, 0xda, 0xf9, 0xa7, 0x6c, 0x8b, 0x7c, 0x29, 0xe7,
	0xf8, 0x52, 0x49, 0xf9, 0x72, 0x07, 0x2a, 0xae, 0x64, 0x5c, 0xd2, 0x2a, 0x76, 0x04, 0x8d, 0x2c,
	0xb7, 0x6a, 0x0b, 0xb9, 0x55, 0x9f, 0x73, 0x8b, 0x6c, 0xe2, 0x09, 0xeb, 0x77, 0x82, 0x09, 0x67,
	0x44, 0x1b, 0x01, 0x78, 0xb1, 0x62, 0x66, 0x30, 0xad, 0x43, 0x2e, 0x27, 0x42, 0x2b, 0x0a, 0x98,
	0x78, 0x52, 0x32, 0x11, 0xbe, 0xe2, 0x72, 0x1a, 0xd1, 0x0c, 0x22, 0x12, 0x12, 0xd9, 0x80, 0x86,
	0xeb, 0x6b, 0x2e, 0x4d, 0x5e, 0x74, 0x09, 0x97, 0x88, 0x05, 0xb2, 0x0d, 0x2d, 0x6c, 0x04, 0xd1,
	0x46, 0x52, 0x74, 0x19, 0x27, 0x99, 0xd3, 0x53, 0xb1, 0x66, 0x03, 0x8a, 0xae, 0xcc, 0xc5, 0xa2,
	0x4e, 0x2c, 0x58, 0x72, 0xe5, 0xc8, 0x8c, 0x3b, 0xf8, 0xee, 0x70, 0x49, 0x57, 0x31, 0x6e, 0x46,
	0x23, 0x2f, 0x60, 0xcd, 0x6c, 0xe5, 0x83, 0xed, 0xd8, 0x23, 0x2e, 0xcd, 0x38, 0x81, 0xb7, 0x97,
	0xb6, 0x30, 0x38, 0xbb, 0xd3, 0x64, 0xa1, 0x5c, 0x5f, 0x0e, 0x79, 0x8f, 0x19, 0x9b, 0x4e, 0x05,
	0x97, 0xf4, 0x56, 0x90, 0x45, 0x5a, 0x27, 0x3b, 0x70, 0x7b, 0x64, 0xac, 0xd8, 0x73, 0x1d, 0x6d,
	0x0b, 0x27, 0x28, 0x45, 0x9a, 0x12, 0x3c, 0x85, 0xac, 0x2e, 0xeb, 0x57, 0x29, 0x89, 0xf0, 0x1e,
	0x3a, 0x9a, 0xa8, 0x1d, 0xc8, 0x4f, 0x21, 0x87, 0x9f, 0x62, 0x1e, 0x3f, 0x25, 0x1c, 0x90, 0xcf,
	0x4f, 0xce, 0x6d, 0x9f, 0xa5, 0xa3, 0x32, 0x47, 0x87, 0x05, 0x4b, 0x21, 0x0a, 0x02, 0xcd, 0xaf,
	0x06, 0x67, 0x9c, 0xd4, 0x4c, 0x4c, 0x08, 0x43, 0x10, 0x53, 0x0b, 0x62, 0x92, 0xda, 0x2c, 0x21,
	0xf5, 0x45, 0x08, 0x69, 0x5c, 0x81, 0x10, 0xc8, 0x21, 0x24, 0xcb, 0xc7, 0x66, 0xb6, 0x8f, 0xd6,
	0x71, 0xb2, 0x2e, 0x4c, 0x4d, 0xb9, 0xa9, 0xba, 0x60, 0xfd, 0x2d, 0x27, 0x3d, 0x3f, 0xf2, 0xd8,
	0xac, 0xe7, 0x73, 0xdf, 0x8b, 0xab, 0xd6, 0xf7, 0x88, 0x83, 0x72, 0x92, 0x83, 0x20, 0x8b, 0x4a,
	0x54, 0x9d, 0x32, 0xb8, 0xa8, 0x2e, 0x54, 0x57, 0x6a, 0xf3, 0x75, 0x25, 0xf7, 0x66, 0xd5, 0x2f,
	0xba, 0x59, 0x97, 0x55, 0xa3, 0x34, 0x6f, 0xb0, 0x00, 0x6f, 0xcd, 0xcb, 0x78, 0xfb, 0xaf, 0x2a,
	0x52, 0x16, 0x93, 0xad, 0x45, 0x98, 0x9c, 0x42, 0x73, 0x63, 0x4c, 0x3e, 0x99, 0xfd, 0x92, 0x8e,
	0x79, 0x8c, 0x64, 0xfa, 0x8d, 0xf5, 0x12, 0x1e, 0xcf, 0x7e, 0xf2, 0x0f, 0x11, 0x3c, 0x3c, 0xa1,
	0xdd, 0x73, 0xf3, 0x93, 0x37, 0xf2, 0x1c, 0xb6, 0x2e, 0x1d, 0x79, 0xed, 0x1d, 0x6d, 0x40, 0x23,
	0xb8, 0x01, 0x3d, 0xa6, 0xc2, 0x47, 0x5a, 0x2c, 0x58, 0xaf, 0xa0, 0x9d, 0xbb, 0xf4, 0x34, 0xdd,
	0x75, 0xa8, 0x1a, 0x6e, 0x7a, 0x2c, 0xbc, 0x7d, 0x61, 0xcb, 0xf2, 0xe1, 0xd1, 0x05, 0x63, 0xaf,
	0x9d, 0xf0, 0x66, 0xea, 0xb9, 0x63, 0x32, 0x4e, 0x28, 0xbb, 0x0f, 0x3e, 0x37, 0xf1, 0x19, 0xac,
	0x9e, 0x9a, 0x27, 0xd0, 0x9f, 0xe2, 0xf2, 0xbe, 0x70, 0x46, 0x9f, 0xec, 0xf1, 0x97, 0xee, 0x81,
	0xed, 0x89, 0x93, 0x2a, 0x76, 0x3e, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff, 0x1c, 0xae, 0xf1, 0x1e,
	0x37, 0x0b, 0x00, 0x00,
}
