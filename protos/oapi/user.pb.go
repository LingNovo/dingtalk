// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package oapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 通过CODE换取用户身份请求参数
type UserIdByCodeRequest struct {
	// requestAuthCode接口中获取的CODE
	Code string `protobuf:"bytes,1,opt,name=code" json:"code,omitempty"`
}

func (m *UserIdByCodeRequest) Reset()                    { *m = UserIdByCodeRequest{} }
func (m *UserIdByCodeRequest) String() string            { return proto.CompactTextString(m) }
func (*UserIdByCodeRequest) ProtoMessage()               {}
func (*UserIdByCodeRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *UserIdByCodeRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

// 通过CODE换取用户身份响应参数
type UserIdByCodeResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	// 员工在企业内的UserID
	Userid string `protobuf:"bytes,3,opt,name=userid" json:"userid,omitempty"`
	// 手机设备号,由钉钉在安装时随机产生
	DeviceId string `protobuf:"bytes,4,opt,name=deviceId" json:"deviceId,omitempty"`
	// 是否是管理员
	IsSys bool `protobuf:"varint,5,opt,name=is_sys,json=isSys" json:"is_sys,omitempty"`
	// 级别，0：非管理员 1：超级管理员（主管理员） 2：普通管理员（子管理员） 100：老板
	SysLevel int32 `protobuf:"varint,6,opt,name=sys_level,json=sysLevel" json:"sys_level,omitempty"`
}

func (m *UserIdByCodeResponse) Reset()                    { *m = UserIdByCodeResponse{} }
func (m *UserIdByCodeResponse) String() string            { return proto.CompactTextString(m) }
func (*UserIdByCodeResponse) ProtoMessage()               {}
func (*UserIdByCodeResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *UserIdByCodeResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *UserIdByCodeResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UserIdByCodeResponse) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserIdByCodeResponse) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *UserIdByCodeResponse) GetIsSys() bool {
	if m != nil {
		return m.IsSys
	}
	return false
}

func (m *UserIdByCodeResponse) GetSysLevel() int32 {
	if m != nil {
		return m.SysLevel
	}
	return 0
}

// 根据unionid获取成员的userid请求参数
type UserIdByUnionIdRequest struct {
	// 用户在当前钉钉开放平台账号范围内的唯一标识，同一个钉钉开放平台账号可以包含多个开放应用，同时也包含ISV的套件应用及企业应用
	Unionid string `protobuf:"bytes,1,opt,name=unionid" json:"unionid,omitempty"`
}

func (m *UserIdByUnionIdRequest) Reset()                    { *m = UserIdByUnionIdRequest{} }
func (m *UserIdByUnionIdRequest) String() string            { return proto.CompactTextString(m) }
func (*UserIdByUnionIdRequest) ProtoMessage()               {}
func (*UserIdByUnionIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *UserIdByUnionIdRequest) GetUnionid() string {
	if m != nil {
		return m.Unionid
	}
	return ""
}

// 根据unionid获取成员的userid响应参数
type UserIdByUnionIdResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	// 联系类型
	ContactType string `protobuf:"bytes,3,opt,name=contactType" json:"contactType,omitempty"`
	// 员工唯一标识ID(不可修改)
	Userid string `protobuf:"bytes,4,opt,name=userid" json:"userid,omitempty"`
}

func (m *UserIdByUnionIdResponse) Reset()                    { *m = UserIdByUnionIdResponse{} }
func (m *UserIdByUnionIdResponse) String() string            { return proto.CompactTextString(m) }
func (*UserIdByUnionIdResponse) ProtoMessage()               {}
func (*UserIdByUnionIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *UserIdByUnionIdResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *UserIdByUnionIdResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UserIdByUnionIdResponse) GetContactType() string {
	if m != nil {
		return m.ContactType
	}
	return ""
}

func (m *UserIdByUnionIdResponse) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// ISV获取用户详情时需要提供的参数
type DTIsvGetCompanyInfo struct {
	// 授权方企业id
	AuthCorpId string `protobuf:"bytes,1,opt,name=auth_corp_id,json=authCorpId" json:"auth_corp_id,omitempty"`
	// 永久授权码
	PermanentCode string `protobuf:"bytes,2,opt,name=permanent_code,json=permanentCode" json:"permanent_code,omitempty"`
	// 授权方（企业）corp_access_token
	AuthAccessToken string `protobuf:"bytes,3,opt,name=auth_access_token,json=authAccessToken" json:"auth_access_token,omitempty"`
}

func (m *DTIsvGetCompanyInfo) Reset()                    { *m = DTIsvGetCompanyInfo{} }
func (m *DTIsvGetCompanyInfo) String() string            { return proto.CompactTextString(m) }
func (*DTIsvGetCompanyInfo) ProtoMessage()               {}
func (*DTIsvGetCompanyInfo) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *DTIsvGetCompanyInfo) GetAuthCorpId() string {
	if m != nil {
		return m.AuthCorpId
	}
	return ""
}

func (m *DTIsvGetCompanyInfo) GetPermanentCode() string {
	if m != nil {
		return m.PermanentCode
	}
	return ""
}

func (m *DTIsvGetCompanyInfo) GetAuthAccessToken() string {
	if m != nil {
		return m.AuthAccessToken
	}
	return ""
}

// 通过userid获取用户详细信息请求参数
type UserInfoByUserIdRequest struct {
	// 员工在企业内的UserID，企业用来唯一标识用户的字段。
	Userid string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
	// 通讯录语言(默认zh_CN，未来会支持en_US)
	Lang string `protobuf:"bytes,2,opt,name=lang" json:"lang,omitempty"`
	// ISV获取用户详情时需要提供的参数
	IsvCompanyInfo *DTIsvGetCompanyInfo `protobuf:"bytes,3,opt,name=isv_company_info,json=isvCompanyInfo" json:"isv_company_info,omitempty"`
}

func (m *UserInfoByUserIdRequest) Reset()                    { *m = UserInfoByUserIdRequest{} }
func (m *UserInfoByUserIdRequest) String() string            { return proto.CompactTextString(m) }
func (*UserInfoByUserIdRequest) ProtoMessage()               {}
func (*UserInfoByUserIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *UserInfoByUserIdRequest) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserInfoByUserIdRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *UserInfoByUserIdRequest) GetIsvCompanyInfo() *DTIsvGetCompanyInfo {
	if m != nil {
		return m.IsvCompanyInfo
	}
	return nil
}

// 角色信息（ISV不可见），json数组格式
type Roles struct {
	// 角色id（ISV不可见）
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// 角色名称（ISV不可见）
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 角色分组名称（ISV不可见）
	GroupName string `protobuf:"bytes,3,opt,name=groupName" json:"groupName,omitempty"`
}

func (m *Roles) Reset()                    { *m = Roles{} }
func (m *Roles) String() string            { return proto.CompactTextString(m) }
func (*Roles) ProtoMessage()               {}
func (*Roles) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *Roles) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Roles) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Roles) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

// 通过userid获取用户详细信息响应参数
type UserInfoByUserIdResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	// 员工唯一标识ID（不可修改）
	Userid string `protobuf:"bytes,3,opt,name=userid" json:"userid,omitempty"`
	// 在本 服务窗运营服务商 范围内,唯一标识关注者身份的id（不可修改）
	Openid string `protobuf:"bytes,4,opt,name=openid" json:"openid,omitempty"`
	// 成员名称
	Name string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	// 分机号（仅限企业内部开发调用）
	Tel string `protobuf:"bytes,6,opt,name=tel" json:"tel,omitempty"`
	// 办公地点（ISV不可见）
	WorkPlace string `protobuf:"bytes,7,opt,name=workPlace" json:"workPlace,omitempty"`
	// 备注（ISV不可见）
	Remark string `protobuf:"bytes,8,opt,name=remark" json:"remark,omitempty"`
	// 手机号码（ISV不可见）
	Mobile string `protobuf:"bytes,9,opt,name=mobile" json:"mobile,omitempty"`
	// 员工的电子邮箱（ISV不可见）
	Email string `protobuf:"bytes,10,opt,name=email" json:"email,omitempty"`
	// 员工的企业邮箱，如果员工已经开通了企业邮箱，接口会返回，否则不会返回（ISV不可见）
	OrgEmail string `protobuf:"bytes,11,opt,name=orgEmail" json:"orgEmail,omitempty"`
	// 是否已经激活, true表示已激活, false表示未激活
	Active bool `protobuf:"varint,12,opt,name=active" json:"active,omitempty"`
	// 在对应的部门中的排序, Map结构的json字符串, key是部门的Id, value是人员在这个部门的排序值
	OrderInDepts string `protobuf:"bytes,13,opt,name=orderInDepts" json:"orderInDepts,omitempty"`
	// 是否为企业的管理员, true表示是, false表示不是
	IsAdmin bool `protobuf:"varint,14,opt,name=isAdmin" json:"isAdmin,omitempty"`
	// 是否为企业的老板, true表示是, false表示不是（【设置负责人】：主管理员登陆钉钉手机客户端 -【通讯录】-【企业名后面的管理】-【企业通讯录】-【负责人设置】进行添加则可。）
	IsBoss bool `protobuf:"varint,15,opt,name=isBoss" json:"isBoss,omitempty"`
	// 在当前isv全局范围内唯一标识一个用户的身份,用户无法修改
	Unionid string `protobuf:"bytes,16,opt,name=unionid" json:"unionid,omitempty"`
	// 在对应的部门中是否为主管, Map结构的json字符串, key是部门的Id, value是人员在这个部门中是否为主管, true表示是, false表示不是
	IsLeaderInDepts string `protobuf:"bytes,17,opt,name=isLeaderInDepts" json:"isLeaderInDepts,omitempty"`
	// 是否号码隐藏, true表示隐藏, false表示不隐藏
	IsHide bool `protobuf:"varint,18,opt,name=isHide" json:"isHide,omitempty"`
	// 成员所属部门id列表
	Department []int64 `protobuf:"varint,19,rep,packed,name=department" json:"department,omitempty"`
	// 职位信息
	Position string `protobuf:"bytes,20,opt,name=position" json:"position,omitempty"`
	// 头像url
	Avatar string `protobuf:"bytes,21,opt,name=avatar" json:"avatar,omitempty"`
	// 入职时间
	HiredDate int64 `protobuf:"varint,22,opt,name=hiredDate" json:"hiredDate,omitempty"`
	// 员工工号
	Jobnumber string `protobuf:"bytes,23,opt,name=jobnumber" json:"jobnumber,omitempty"`
	// 扩展属性，可以设置多种属性(但手机上最多只能显示10个扩展属性，具体显示哪些属性，请到OA管理后台->设置->通讯录信息设置和OA管理后台->设置->手机端显示信息设置)
	Extattr map[string]string `protobuf:"bytes,24,rep,name=extattr" json:"extattr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 手机号码区号
	StateCode string `protobuf:"bytes,25,opt,name=stateCode" json:"stateCode,omitempty"`
	// 是否是高管
	IsSenior bool `protobuf:"varint,26,opt,name=isSenior" json:"isSenior,omitempty"`
	// 角色信息（ISV不可见），json数组格式
	Roles []*Roles `protobuf:"bytes,27,rep,name=roles" json:"roles,omitempty"`
	// 在钉钉全局范围内唯一标识用户的身份
	DingId string `protobuf:"bytes,28,opt,name=dingId" json:"dingId,omitempty"`
}

func (m *UserInfoByUserIdResponse) Reset()                    { *m = UserInfoByUserIdResponse{} }
func (m *UserInfoByUserIdResponse) String() string            { return proto.CompactTextString(m) }
func (*UserInfoByUserIdResponse) ProtoMessage()               {}
func (*UserInfoByUserIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *UserInfoByUserIdResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *UserInfoByUserIdResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetOpenid() string {
	if m != nil {
		return m.Openid
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetTel() string {
	if m != nil {
		return m.Tel
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetWorkPlace() string {
	if m != nil {
		return m.WorkPlace
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetOrgEmail() string {
	if m != nil {
		return m.OrgEmail
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *UserInfoByUserIdResponse) GetOrderInDepts() string {
	if m != nil {
		return m.OrderInDepts
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *UserInfoByUserIdResponse) GetIsBoss() bool {
	if m != nil {
		return m.IsBoss
	}
	return false
}

func (m *UserInfoByUserIdResponse) GetUnionid() string {
	if m != nil {
		return m.Unionid
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetIsLeaderInDepts() string {
	if m != nil {
		return m.IsLeaderInDepts
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetIsHide() bool {
	if m != nil {
		return m.IsHide
	}
	return false
}

func (m *UserInfoByUserIdResponse) GetDepartment() []int64 {
	if m != nil {
		return m.Department
	}
	return nil
}

func (m *UserInfoByUserIdResponse) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetHiredDate() int64 {
	if m != nil {
		return m.HiredDate
	}
	return 0
}

func (m *UserInfoByUserIdResponse) GetJobnumber() string {
	if m != nil {
		return m.Jobnumber
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetExtattr() map[string]string {
	if m != nil {
		return m.Extattr
	}
	return nil
}

func (m *UserInfoByUserIdResponse) GetStateCode() string {
	if m != nil {
		return m.StateCode
	}
	return ""
}

func (m *UserInfoByUserIdResponse) GetIsSenior() bool {
	if m != nil {
		return m.IsSenior
	}
	return false
}

func (m *UserInfoByUserIdResponse) GetRoles() []*Roles {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *UserInfoByUserIdResponse) GetDingId() string {
	if m != nil {
		return m.DingId
	}
	return ""
}

// 获取部门成员请求参数(精简)
type UserSimpleListRequest struct {
	// 通讯录语言(默认zh_CN另外支持en_US)
	Lang string `protobuf:"bytes,1,opt,name=lang" json:"lang,omitempty"`
	// 获取的部门id
	DepartmentId int64 `protobuf:"varint,2,opt,name=department_id,json=departmentId" json:"department_id,omitempty"`
	// 支持分页查询，与size参数同时设置时才生效，此参数代表偏移量
	Offset int64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	// 支持分页查询，与offset参数同时设置时才生效，此参数代表分页大小，最大100
	Size int64 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	// 支持分页查询，部门成员的排序规则，默认不传是按自定义排序；entry_asc代表按照进入部门的时间升序，entry_desc代表按照进入部门的时间降序，modify_asc代表按照部门信息修改时间升序，modify_desc代表按照部门信息修改时间降序，custom代表用户定义(未定义时按照拼音)排序
	Order string `protobuf:"bytes,5,opt,name=order" json:"order,omitempty"`
}

func (m *UserSimpleListRequest) Reset()                    { *m = UserSimpleListRequest{} }
func (m *UserSimpleListRequest) String() string            { return proto.CompactTextString(m) }
func (*UserSimpleListRequest) ProtoMessage()               {}
func (*UserSimpleListRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *UserSimpleListRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *UserSimpleListRequest) GetDepartmentId() int64 {
	if m != nil {
		return m.DepartmentId
	}
	return 0
}

func (m *UserSimpleListRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *UserSimpleListRequest) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *UserSimpleListRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

// 简单的成员信息
type USimpleList struct {
	// 员工唯一标识Id(不可修改)
	Userid string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
	// 成员名称
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *USimpleList) Reset()                    { *m = USimpleList{} }
func (m *USimpleList) String() string            { return proto.CompactTextString(m) }
func (*USimpleList) ProtoMessage()               {}
func (*USimpleList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *USimpleList) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *USimpleList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// 获取部门成员响应参数(精简)
type UserSimpleListResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	// 在分页查询时返回，代表是否还有下一页更多数据
	HasMore bool `protobuf:"varint,3,opt,name=hasMore" json:"hasMore,omitempty"`
	// 成员列表
	Userlist []*USimpleList `protobuf:"bytes,4,rep,name=userlist" json:"userlist,omitempty"`
}

func (m *UserSimpleListResponse) Reset()                    { *m = UserSimpleListResponse{} }
func (m *UserSimpleListResponse) String() string            { return proto.CompactTextString(m) }
func (*UserSimpleListResponse) ProtoMessage()               {}
func (*UserSimpleListResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *UserSimpleListResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *UserSimpleListResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UserSimpleListResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *UserSimpleListResponse) GetUserlist() []*USimpleList {
	if m != nil {
		return m.Userlist
	}
	return nil
}

// 获取部门成员请求参数（详情版）
type UserListRequest struct {
	// 通讯录语言(默认zh_CN另外支持en_US)
	Lang string `protobuf:"bytes,1,opt,name=lang" json:"lang,omitempty"`
	// 获取的部门id
	DepartmentId int64 `protobuf:"varint,2,opt,name=department_id,json=departmentId" json:"department_id,omitempty"`
	// 支持分页查询，与size参数同时设置时才生效，此参数代表偏移量
	Offset int64 `protobuf:"varint,3,opt,name=offset" json:"offset,omitempty"`
	// 支持分页查询，与offset参数同时设置时才生效，此参数代表分页大小，最大100
	Size int32 `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	// 支持分页查询，部门成员的排序规则，默认不传是按自定义排序；entry_asc代表按照进入部门的时间升序，entry_desc代表按照进入部门的时间降序，modify_asc代表按照部门信息修改时间升序，modify_desc代表按照部门信息修改时间降序，custom代表用户定义(未定义时按照拼音)排序
	Order string `protobuf:"bytes,5,opt,name=order" json:"order,omitempty"`
}

func (m *UserListRequest) Reset()                    { *m = UserListRequest{} }
func (m *UserListRequest) String() string            { return proto.CompactTextString(m) }
func (*UserListRequest) ProtoMessage()               {}
func (*UserListRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *UserListRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *UserListRequest) GetDepartmentId() int64 {
	if m != nil {
		return m.DepartmentId
	}
	return 0
}

func (m *UserListRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *UserListRequest) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *UserListRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

// 成员信息详情
type UDetailedList struct {
	// 员工唯一标识ID（不可修改）
	Userid string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
	// 表示人员在此部门中的排序，列表是按order的倒序排列输出的，即从大到小排列输出的（OA后台里面调整了顺序的话order才有值）
	Order int64 `protobuf:"varint,2,opt,name=order" json:"order,omitempty"`
	// 在当前isv全局范围内唯一标识一个用户的身份,用户无法修改
	Unionid string `protobuf:"bytes,3,opt,name=unionid" json:"unionid,omitempty"`
	// 手机号（ISV不可见）
	Mobile string `protobuf:"bytes,4,opt,name=mobile" json:"mobile,omitempty"`
	// 分机号（ISV不可见）
	Tel string `protobuf:"bytes,5,opt,name=tel" json:"tel,omitempty"`
	// 办公地点（ISV不可见）
	WorkPlace string `protobuf:"bytes,6,opt,name=workPlace" json:"workPlace,omitempty"`
	// 备注（ISV不可见）
	Remark string `protobuf:"bytes,7,opt,name=remark" json:"remark,omitempty"`
	// 是否是企业的管理员, true表示是, false表示不是
	IsAdmin bool `protobuf:"varint,8,opt,name=isAdmin" json:"isAdmin,omitempty"`
	// 是否为企业的老板, true表示是, false表示不是 （不能通过接口设置,可以通过OA后台设置）
	IsBoss bool `protobuf:"varint,9,opt,name=isBoss" json:"isBoss,omitempty"`
	// 是否隐藏号码, true表示是, false表示不是
	IsHide bool `protobuf:"varint,10,opt,name=isHide" json:"isHide,omitempty"`
	// 是否是部门的主管, true表示是, false表示不是
	IsLeader bool `protobuf:"varint,11,opt,name=isLeader" json:"isLeader,omitempty"`
	// 成员名称
	Name string `protobuf:"bytes,12,opt,name=name" json:"name,omitempty"`
	// 表示该用户是否激活了钉钉
	Active bool `protobuf:"varint,13,opt,name=active" json:"active,omitempty"`
	// 成员所属部门id列表
	Department []int64 `protobuf:"varint,14,rep,packed,name=department" json:"department,omitempty"`
	// 职位信息
	Position string `protobuf:"bytes,15,opt,name=position" json:"position,omitempty"`
	// 员工的邮箱
	Email string `protobuf:"bytes,16,opt,name=email" json:"email,omitempty"`
	// 员工的企业邮箱，如果员工的企业邮箱没有开通，返回信息中不包含
	OrgEmail string `protobuf:"bytes,17,opt,name=orgEmail" json:"orgEmail,omitempty"`
	// 头像url
	Avatar string `protobuf:"bytes,18,opt,name=avatar" json:"avatar,omitempty"`
	// 员工工号
	Jobnumber string `protobuf:"bytes,19,opt,name=jobnumber" json:"jobnumber,omitempty"`
	// 入职时间
	HiredDate int64 `protobuf:"varint,20,opt,name=hiredDate" json:"hiredDate,omitempty"`
	// 扩展属性，可以设置多种属性(但手机上最多只能显示10个扩展属性，具体显示哪些属性，请到OA管理后台->设置->通讯录信息设置和OA管理后台->设置->手机端显示信息设置)
	Extattr map[string]string `protobuf:"bytes,21,rep,name=extattr" json:"extattr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 员工在当前企业的唯一标识ID（不可修改）
	OpenId string `protobuf:"bytes,22,opt,name=openId" json:"openId,omitempty"`
	// 在钉钉全局范围内唯一标识用户的身份
	DingId string `protobuf:"bytes,23,opt,name=dingId" json:"dingId,omitempty"`
}

func (m *UDetailedList) Reset()                    { *m = UDetailedList{} }
func (m *UDetailedList) String() string            { return proto.CompactTextString(m) }
func (*UDetailedList) ProtoMessage()               {}
func (*UDetailedList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *UDetailedList) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UDetailedList) GetOrder() int64 {
	if m != nil {
		return m.Order
	}
	return 0
}

func (m *UDetailedList) GetUnionid() string {
	if m != nil {
		return m.Unionid
	}
	return ""
}

func (m *UDetailedList) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UDetailedList) GetTel() string {
	if m != nil {
		return m.Tel
	}
	return ""
}

func (m *UDetailedList) GetWorkPlace() string {
	if m != nil {
		return m.WorkPlace
	}
	return ""
}

func (m *UDetailedList) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UDetailedList) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

func (m *UDetailedList) GetIsBoss() bool {
	if m != nil {
		return m.IsBoss
	}
	return false
}

func (m *UDetailedList) GetIsHide() bool {
	if m != nil {
		return m.IsHide
	}
	return false
}

func (m *UDetailedList) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

func (m *UDetailedList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UDetailedList) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *UDetailedList) GetDepartment() []int64 {
	if m != nil {
		return m.Department
	}
	return nil
}

func (m *UDetailedList) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *UDetailedList) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UDetailedList) GetOrgEmail() string {
	if m != nil {
		return m.OrgEmail
	}
	return ""
}

func (m *UDetailedList) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UDetailedList) GetJobnumber() string {
	if m != nil {
		return m.Jobnumber
	}
	return ""
}

func (m *UDetailedList) GetHiredDate() int64 {
	if m != nil {
		return m.HiredDate
	}
	return 0
}

func (m *UDetailedList) GetExtattr() map[string]string {
	if m != nil {
		return m.Extattr
	}
	return nil
}

func (m *UDetailedList) GetOpenId() string {
	if m != nil {
		return m.OpenId
	}
	return ""
}

func (m *UDetailedList) GetDingId() string {
	if m != nil {
		return m.DingId
	}
	return ""
}

// 获取部门成员响应参数（详情版）
type UserListResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	// 在分页查询时返回，代表是否还有下一页更多数据
	HasMore bool `protobuf:"varint,3,opt,name=hasMore" json:"hasMore,omitempty"`
	// 成员列表
	Userlist []*UDetailedList `protobuf:"bytes,4,rep,name=userlist" json:"userlist,omitempty"`
}

func (m *UserListResponse) Reset()                    { *m = UserListResponse{} }
func (m *UserListResponse) String() string            { return proto.CompactTextString(m) }
func (*UserListResponse) ProtoMessage()               {}
func (*UserListResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *UserListResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *UserListResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UserListResponse) GetHasMore() bool {
	if m != nil {
		return m.HasMore
	}
	return false
}

func (m *UserListResponse) GetUserlist() []*UDetailedList {
	if m != nil {
		return m.Userlist
	}
	return nil
}

// 管理员列表
type UAdminList struct {
	// 员工唯一标识ID（不可修改）
	SysLevel int32 `protobuf:"varint,1,opt,name=sys_level,json=sysLevel" json:"sys_level,omitempty"`
	// 管理员角色 1:主管理员,2:子管理员
	Userid string `protobuf:"bytes,2,opt,name=userid" json:"userid,omitempty"`
}

func (m *UAdminList) Reset()                    { *m = UAdminList{} }
func (m *UAdminList) String() string            { return proto.CompactTextString(m) }
func (*UAdminList) ProtoMessage()               {}
func (*UAdminList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *UAdminList) GetSysLevel() int32 {
	if m != nil {
		return m.SysLevel
	}
	return 0
}

func (m *UAdminList) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// 获取管理员列表响应参数
type UserAdminListResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	// 管理员列表
	AdminList []*UAdminList `protobuf:"bytes,3,rep,name=admin_list,json=adminList" json:"admin_list,omitempty"`
}

func (m *UserAdminListResponse) Reset()                    { *m = UserAdminListResponse{} }
func (m *UserAdminListResponse) String() string            { return proto.CompactTextString(m) }
func (*UserAdminListResponse) ProtoMessage()               {}
func (*UserAdminListResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *UserAdminListResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *UserAdminListResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UserAdminListResponse) GetAdminList() []*UAdminList {
	if m != nil {
		return m.AdminList
	}
	return nil
}

// 获取管理员的微应用管理权限请求参数
type UserCanAccessMicroappRequest struct {
	// 微应用id
	AppId string `protobuf:"bytes,1,opt,name=appId" json:"appId,omitempty"`
	// 员工唯一标识id
	UserId string `protobuf:"bytes,2,opt,name=userId" json:"userId,omitempty"`
}

func (m *UserCanAccessMicroappRequest) Reset()                    { *m = UserCanAccessMicroappRequest{} }
func (m *UserCanAccessMicroappRequest) String() string            { return proto.CompactTextString(m) }
func (*UserCanAccessMicroappRequest) ProtoMessage()               {}
func (*UserCanAccessMicroappRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{16} }

func (m *UserCanAccessMicroappRequest) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *UserCanAccessMicroappRequest) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// 获取管理员的微应用管理权限响应参数
type UserCanAccessMicroappResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	// 表示是否能管理该微应用
	CanAccess bool `protobuf:"varint,3,opt,name=canAccess" json:"canAccess,omitempty"`
}

func (m *UserCanAccessMicroappResponse) Reset()                    { *m = UserCanAccessMicroappResponse{} }
func (m *UserCanAccessMicroappResponse) String() string            { return proto.CompactTextString(m) }
func (*UserCanAccessMicroappResponse) ProtoMessage()               {}
func (*UserCanAccessMicroappResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{17} }

func (m *UserCanAccessMicroappResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *UserCanAccessMicroappResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UserCanAccessMicroappResponse) GetCanAccess() bool {
	if m != nil {
		return m.CanAccess
	}
	return false
}

// 创建成员请求参数
type UserCreateRequest struct {
	// 员工唯一标识ID（不可修改），企业内必须唯一。长度为1~64个字符，如果不传，服务器将自动生成一个userid
	Userid string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
	// 成员名称。长度为1~64个字符
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// 在对应的部门中的排序, Map结构的json字符串, key是部门的Id, value是人员在这个部门的排序值
	OrderInDepts string `protobuf:"bytes,3,opt,name=orderInDepts" json:"orderInDepts,omitempty"`
	// 数组类型，数组里面值为整型，成员所属部门id列表
	Department []int64 `protobuf:"varint,4,rep,packed,name=department" json:"department,omitempty"`
	// 职位信息。长度为0~64个字符
	Position string `protobuf:"bytes,5,opt,name=position" json:"position,omitempty"`
	// 手机号码，企业内必须唯一，不可重复
	Mobile string `protobuf:"bytes,6,opt,name=mobile" json:"mobile,omitempty"`
	// 分机号，长度为0~50个字符，企业内必须唯一，不可重复
	Tel string `protobuf:"bytes,7,opt,name=tel" json:"tel,omitempty"`
	// 办公地点，长度为0~50个字符
	WorkPlace string `protobuf:"bytes,8,opt,name=workPlace" json:"workPlace,omitempty"`
	// 备注，长度为0~1000个字符
	Remark string `protobuf:"bytes,9,opt,name=remark" json:"remark,omitempty"`
	// 邮箱。长度为0~64个字符。企业内必须唯一，不可重复
	Email string `protobuf:"bytes,10,opt,name=email" json:"email,omitempty"`
	// 员工的企业邮箱，员工的企业邮箱已开通，才能增加此字段， 否则会报错
	OrgEmail string `protobuf:"bytes,11,opt,name=orgEmail" json:"orgEmail,omitempty"`
	// 员工工号。对应显示到OA后台和客户端个人资料的工号栏目。长度为0~64个字符
	Jobnumber string `protobuf:"bytes,12,opt,name=jobnumber" json:"jobnumber,omitempty"`
	// 是否号码隐藏, true表示隐藏, false表示不隐藏。隐藏手机号后，手机号在个人资料页隐藏，但仍可对其发DING、发起钉钉免费商务电话。
	IsHide bool `protobuf:"varint,13,opt,name=isHide" json:"isHide,omitempty"`
	// 是否高管模式，true表示是，false表示不是。开启后，手机号码对所有员工隐藏。普通员工无法对其发DING、发起钉钉免费商务电话。高管之间不受影响。
	IsSenior bool `protobuf:"varint,14,opt,name=isSenior" json:"isSenior,omitempty"`
	// 是否高管模式，true表示是，false表示不是。开启后，手机号码对所有员工隐藏。普通员工无法对其发DING、发起钉钉免费商务电话。高管之间不受影响。
	Extattr map[string]string `protobuf:"bytes,15,rep,name=extattr" json:"extattr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UserCreateRequest) Reset()                    { *m = UserCreateRequest{} }
func (m *UserCreateRequest) String() string            { return proto.CompactTextString(m) }
func (*UserCreateRequest) ProtoMessage()               {}
func (*UserCreateRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{18} }

func (m *UserCreateRequest) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserCreateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserCreateRequest) GetOrderInDepts() string {
	if m != nil {
		return m.OrderInDepts
	}
	return ""
}

func (m *UserCreateRequest) GetDepartment() []int64 {
	if m != nil {
		return m.Department
	}
	return nil
}

func (m *UserCreateRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *UserCreateRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserCreateRequest) GetTel() string {
	if m != nil {
		return m.Tel
	}
	return ""
}

func (m *UserCreateRequest) GetWorkPlace() string {
	if m != nil {
		return m.WorkPlace
	}
	return ""
}

func (m *UserCreateRequest) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UserCreateRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserCreateRequest) GetOrgEmail() string {
	if m != nil {
		return m.OrgEmail
	}
	return ""
}

func (m *UserCreateRequest) GetJobnumber() string {
	if m != nil {
		return m.Jobnumber
	}
	return ""
}

func (m *UserCreateRequest) GetIsHide() bool {
	if m != nil {
		return m.IsHide
	}
	return false
}

func (m *UserCreateRequest) GetIsSenior() bool {
	if m != nil {
		return m.IsSenior
	}
	return false
}

func (m *UserCreateRequest) GetExtattr() map[string]string {
	if m != nil {
		return m.Extattr
	}
	return nil
}

// 创建成员响应参数
type UserCreateResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	// 员工唯一标识
	Userid string `protobuf:"bytes,3,opt,name=userid" json:"userid,omitempty"`
}

func (m *UserCreateResponse) Reset()                    { *m = UserCreateResponse{} }
func (m *UserCreateResponse) String() string            { return proto.CompactTextString(m) }
func (*UserCreateResponse) ProtoMessage()               {}
func (*UserCreateResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{19} }

func (m *UserCreateResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *UserCreateResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UserCreateResponse) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// 更新成员请求参数
type UserUpdateRequest struct {
	// 通讯录语言(默认zh_CN另外支持en_US)
	Lang string `protobuf:"bytes,1,opt,name=lang" json:"lang,omitempty"`
	// 通讯录语言(默认zh_CN另外支持en_US)
	Userid string `protobuf:"bytes,2,opt,name=userid" json:"userid,omitempty"`
	// 成员名称。长度为1~64个字符
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// 成员所属部门id列表
	Department []int64 `protobuf:"varint,4,rep,packed,name=department" json:"department,omitempty"`
	// 实际是Map的序列化字符串，Map的Key是deptId，表示部门id，Map的Value是order，表示排序的值，列表是按order的倒序排列输出的，即从大到小排列输出的
	OrderInDepts string `protobuf:"bytes,5,opt,name=orderInDepts" json:"orderInDepts,omitempty"`
	// 职位信息。长度为0~64个字符
	Position string `protobuf:"bytes,6,opt,name=position" json:"position,omitempty"`
	// 手机号码。企业内必须唯一
	Mobile string `protobuf:"bytes,7,opt,name=mobile" json:"mobile,omitempty"`
	// 分机号，长度为0~50个字符
	Tel string `protobuf:"bytes,8,opt,name=tel" json:"tel,omitempty"`
	// 办公地点，长度为0~50个字符
	WorkPlace string `protobuf:"bytes,9,opt,name=workPlace" json:"workPlace,omitempty"`
	// 备注，长度为0~1000个字符
	Remark string `protobuf:"bytes,10,opt,name=remark" json:"remark,omitempty"`
	// 邮箱。长度为0~64个字符。企业内必须唯一
	Email string `protobuf:"bytes,11,opt,name=email" json:"email,omitempty"`
	// 员工的企业邮箱，需要确认员工已经开通企业邮箱，否则会报错
	OrgEmail string `protobuf:"bytes,12,opt,name=orgEmail" json:"orgEmail,omitempty"`
	// 员工工号，对应显示到OA后台和客户端个人资料的工号栏目。长度为0~64个字符
	Jobnumber string `protobuf:"bytes,13,opt,name=jobnumber" json:"jobnumber,omitempty"`
	// 是否号码隐藏, true表示隐藏, false表示不隐藏。隐藏手机号后，手机号在个人资料页隐藏，但仍可对其发DING、发起钉钉免费商务电话。
	IsHide bool `protobuf:"varint,14,opt,name=isHide" json:"isHide,omitempty"`
	// 是否号码隐藏, true表示隐藏, false表示不隐藏。隐藏手机号后，手机号在个人资料页隐藏，但仍可对其发DING、发起钉钉免费商务电话。
	IsSenior bool `protobuf:"varint,15,opt,name=isSenior" json:"isSenior,omitempty"`
	// 扩展属性，可以设置多种属性(但手机上最多只能显示10个扩展属性，具体显示哪些属性，请到OA管理后台->设置->通讯录信息设置和OA管理后台->设置->手机端显示信息设置)
	Extattr map[string]string `protobuf:"bytes,16,rep,name=extattr" json:"extattr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UserUpdateRequest) Reset()                    { *m = UserUpdateRequest{} }
func (m *UserUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UserUpdateRequest) ProtoMessage()               {}
func (*UserUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{20} }

func (m *UserUpdateRequest) GetLang() string {
	if m != nil {
		return m.Lang
	}
	return ""
}

func (m *UserUpdateRequest) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

func (m *UserUpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserUpdateRequest) GetDepartment() []int64 {
	if m != nil {
		return m.Department
	}
	return nil
}

func (m *UserUpdateRequest) GetOrderInDepts() string {
	if m != nil {
		return m.OrderInDepts
	}
	return ""
}

func (m *UserUpdateRequest) GetPosition() string {
	if m != nil {
		return m.Position
	}
	return ""
}

func (m *UserUpdateRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserUpdateRequest) GetTel() string {
	if m != nil {
		return m.Tel
	}
	return ""
}

func (m *UserUpdateRequest) GetWorkPlace() string {
	if m != nil {
		return m.WorkPlace
	}
	return ""
}

func (m *UserUpdateRequest) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *UserUpdateRequest) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserUpdateRequest) GetOrgEmail() string {
	if m != nil {
		return m.OrgEmail
	}
	return ""
}

func (m *UserUpdateRequest) GetJobnumber() string {
	if m != nil {
		return m.Jobnumber
	}
	return ""
}

func (m *UserUpdateRequest) GetIsHide() bool {
	if m != nil {
		return m.IsHide
	}
	return false
}

func (m *UserUpdateRequest) GetIsSenior() bool {
	if m != nil {
		return m.IsSenior
	}
	return false
}

func (m *UserUpdateRequest) GetExtattr() map[string]string {
	if m != nil {
		return m.Extattr
	}
	return nil
}

// 删除成员请求参数
type UserDeleteRequest struct {
	// 员工唯一标识ID（不可修改）
	Userid string `protobuf:"bytes,1,opt,name=userid" json:"userid,omitempty"`
}

func (m *UserDeleteRequest) Reset()                    { *m = UserDeleteRequest{} }
func (m *UserDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*UserDeleteRequest) ProtoMessage()               {}
func (*UserDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{21} }

func (m *UserDeleteRequest) GetUserid() string {
	if m != nil {
		return m.Userid
	}
	return ""
}

// 批量删除成员请求参数
type UserBatchDeleteRequest struct {
	// 员工UserID列表。列表长度在1到20之间
	Useridlist []string `protobuf:"bytes,1,rep,name=useridlist" json:"useridlist,omitempty"`
}

func (m *UserBatchDeleteRequest) Reset()                    { *m = UserBatchDeleteRequest{} }
func (m *UserBatchDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*UserBatchDeleteRequest) ProtoMessage()               {}
func (*UserBatchDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{22} }

func (m *UserBatchDeleteRequest) GetUseridlist() []string {
	if m != nil {
		return m.Useridlist
	}
	return nil
}

// 获取企业员工人数请求参数
type UserGetOrgUserCountRequest struct {
	// 0：包含未激活钉钉的人员数量 1：不包含未激活钉钉的人员数量
	OnlyActive int32 `protobuf:"varint,1,opt,name=onlyActive" json:"onlyActive,omitempty"`
}

func (m *UserGetOrgUserCountRequest) Reset()                    { *m = UserGetOrgUserCountRequest{} }
func (m *UserGetOrgUserCountRequest) String() string            { return proto.CompactTextString(m) }
func (*UserGetOrgUserCountRequest) ProtoMessage()               {}
func (*UserGetOrgUserCountRequest) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{23} }

func (m *UserGetOrgUserCountRequest) GetOnlyActive() int32 {
	if m != nil {
		return m.OnlyActive
	}
	return 0
}

// 获取企业员工人数响应参数
type UserGetOrgUserCountResponse struct {
	// 返回码
	Errcode int64 `protobuf:"varint,1,opt,name=errcode" json:"errcode,omitempty"`
	// 对返回码的文本描述内容
	Errmsg string `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty"`
	// 企业员工数量
	Count int64 `protobuf:"varint,3,opt,name=count" json:"count,omitempty"`
}

func (m *UserGetOrgUserCountResponse) Reset()                    { *m = UserGetOrgUserCountResponse{} }
func (m *UserGetOrgUserCountResponse) String() string            { return proto.CompactTextString(m) }
func (*UserGetOrgUserCountResponse) ProtoMessage()               {}
func (*UserGetOrgUserCountResponse) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{24} }

func (m *UserGetOrgUserCountResponse) GetErrcode() int64 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *UserGetOrgUserCountResponse) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *UserGetOrgUserCountResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*UserIdByCodeRequest)(nil), "oapi.UserIdByCodeRequest")
	proto.RegisterType((*UserIdByCodeResponse)(nil), "oapi.UserIdByCodeResponse")
	proto.RegisterType((*UserIdByUnionIdRequest)(nil), "oapi.UserIdByUnionIdRequest")
	proto.RegisterType((*UserIdByUnionIdResponse)(nil), "oapi.UserIdByUnionIdResponse")
	proto.RegisterType((*DTIsvGetCompanyInfo)(nil), "oapi.DTIsvGetCompanyInfo")
	proto.RegisterType((*UserInfoByUserIdRequest)(nil), "oapi.UserInfoByUserIdRequest")
	proto.RegisterType((*Roles)(nil), "oapi.Roles")
	proto.RegisterType((*UserInfoByUserIdResponse)(nil), "oapi.UserInfoByUserIdResponse")
	proto.RegisterType((*UserSimpleListRequest)(nil), "oapi.UserSimpleListRequest")
	proto.RegisterType((*USimpleList)(nil), "oapi.USimpleList")
	proto.RegisterType((*UserSimpleListResponse)(nil), "oapi.UserSimpleListResponse")
	proto.RegisterType((*UserListRequest)(nil), "oapi.UserListRequest")
	proto.RegisterType((*UDetailedList)(nil), "oapi.UDetailedList")
	proto.RegisterType((*UserListResponse)(nil), "oapi.UserListResponse")
	proto.RegisterType((*UAdminList)(nil), "oapi.UAdminList")
	proto.RegisterType((*UserAdminListResponse)(nil), "oapi.UserAdminListResponse")
	proto.RegisterType((*UserCanAccessMicroappRequest)(nil), "oapi.UserCanAccessMicroappRequest")
	proto.RegisterType((*UserCanAccessMicroappResponse)(nil), "oapi.UserCanAccessMicroappResponse")
	proto.RegisterType((*UserCreateRequest)(nil), "oapi.UserCreateRequest")
	proto.RegisterType((*UserCreateResponse)(nil), "oapi.UserCreateResponse")
	proto.RegisterType((*UserUpdateRequest)(nil), "oapi.UserUpdateRequest")
	proto.RegisterType((*UserDeleteRequest)(nil), "oapi.UserDeleteRequest")
	proto.RegisterType((*UserBatchDeleteRequest)(nil), "oapi.UserBatchDeleteRequest")
	proto.RegisterType((*UserGetOrgUserCountRequest)(nil), "oapi.UserGetOrgUserCountRequest")
	proto.RegisterType((*UserGetOrgUserCountResponse)(nil), "oapi.UserGetOrgUserCountResponse")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 1473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4b, 0x6f, 0x1b, 0xb7,
	0x16, 0xc6, 0x58, 0x1a, 0x3d, 0x8e, 0x24, 0x3f, 0xc6, 0x8f, 0x30, 0x8e, 0x13, 0xe8, 0xce, 0xbd,
	0x17, 0x50, 0x1b, 0xd4, 0x01, 0xd2, 0x4d, 0x1a, 0x14, 0x05, 0xfc, 0x42, 0x2a, 0xc0, 0x69, 0x8a,
	0x89, 0xbd, 0xe9, 0xa2, 0x02, 0x3d, 0x43, 0xdb, 0xac, 0x47, 0xc3, 0x29, 0x49, 0xa9, 0x55, 0xf6,
	0xdd, 0x14, 0x05, 0x0a, 0x34, 0xff, 0xa2, 0xab, 0x02, 0xfd, 0x6b, 0xdd, 0xb7, 0x20, 0x39, 0x4f,
	0x59, 0xe3, 0xb4, 0x4e, 0xd2, 0xdd, 0x7c, 0x87, 0xe2, 0xe1, 0x39, 0x87, 0xdf, 0xf9, 0x78, 0x6c,
	0x80, 0x89, 0x20, 0x7c, 0x37, 0xe6, 0x4c, 0x32, 0xa7, 0xce, 0x70, 0x4c, 0xdd, 0x0f, 0x60, 0xfd,
	0x54, 0x10, 0x3e, 0x0c, 0xf6, 0x67, 0x07, 0x2c, 0x20, 0x1e, 0xf9, 0x76, 0x42, 0x84, 0x74, 0x1c,
	0xa8, 0xfb, 0x2c, 0x20, 0xc8, 0xea, 0x5b, 0x83, 0xb6, 0xa7, 0xbf, 0xdd, 0xdf, 0x2c, 0xd8, 0x28,
	0xff, 0x56, 0xc4, 0x2c, 0x12, 0xc4, 0x41, 0xd0, 0x24, 0x9c, 0x67, 0xbf, 0xaf, 0x79, 0x29, 0x74,
	0xb6, 0xa0, 0x41, 0x38, 0x1f, 0x8b, 0x0b, 0xb4, 0xa4, 0x1d, 0x25, 0x48, 0xd9, 0x55, 0x24, 0x34,
	0x40, 0x35, 0x63, 0x37, 0xc8, 0xd9, 0x86, 0x56, 0x40, 0xa6, 0xd4, 0x27, 0xc3, 0x00, 0xd5, 0xf5,
	0x4a, 0x86, 0x9d, 0x4d, 0x68, 0x50, 0x31, 0x12, 0x33, 0x81, 0xec, 0xbe, 0x35, 0x68, 0x79, 0x36,
	0x15, 0x2f, 0x67, 0xc2, 0xb9, 0x07, 0x6d, 0x31, 0x13, 0xa3, 0x90, 0x4c, 0x49, 0x88, 0x1a, 0x7d,
	0x6b, 0x60, 0x7b, 0x2d, 0x31, 0x13, 0xc7, 0x0a, 0xbb, 0x8f, 0x61, 0x2b, 0x8d, 0xf8, 0x34, 0xa2,
	0x2c, 0x1a, 0x06, 0x69, 0x82, 0x08, 0x9a, 0x13, 0x65, 0xa1, 0x41, 0x92, 0x63, 0x0a, 0xdd, 0x1f,
	0x2c, 0xb8, 0x73, 0x6d, 0xd3, 0xad, 0x33, 0xed, 0x43, 0xc7, 0x67, 0x91, 0xc4, 0xbe, 0x3c, 0x99,
	0xc5, 0x24, 0x49, 0xb7, 0x68, 0x2a, 0xd4, 0xa2, 0x5e, 0xac, 0x85, 0xfb, 0xa3, 0x05, 0xeb, 0x87,
	0x27, 0x43, 0x31, 0x7d, 0x46, 0xe4, 0x01, 0x1b, 0xc7, 0x38, 0x9a, 0x0d, 0xa3, 0x73, 0xe6, 0xf4,
	0xa1, 0x8b, 0x27, 0xf2, 0x72, 0xe4, 0x33, 0x1e, 0x8f, 0xb2, 0xf0, 0x41, 0xd9, 0x0e, 0x18, 0x8f,
	0x87, 0x81, 0xf3, 0x7f, 0x58, 0x8e, 0x09, 0x1f, 0xe3, 0x88, 0x44, 0x72, 0xa4, 0x83, 0x35, 0x31,
	0xf5, 0x32, 0xab, 0xba, 0x3e, 0xe7, 0x43, 0x58, 0xd3, 0x8e, 0xb0, 0xef, 0x13, 0x21, 0x46, 0x92,
	0x5d, 0x91, 0x28, 0x09, 0x70, 0x45, 0x2d, 0xec, 0x69, 0xfb, 0x89, 0x32, 0xab, 0x60, 0x4c, 0x51,
	0xa2, 0x73, 0xb6, 0x3f, 0x33, 0xe5, 0x49, 0x4b, 0x99, 0x27, 0x60, 0x95, 0x2e, 0xd3, 0x81, 0x7a,
	0x88, 0xa3, 0xb4, 0x20, 0xfa, 0xdb, 0x39, 0x80, 0x55, 0x2a, 0xa6, 0x23, 0xdf, 0xe4, 0x33, 0xa2,
	0xd1, 0x39, 0xd3, 0x47, 0x76, 0x1e, 0xdf, 0xdd, 0x55, 0x7c, 0xdc, 0x5d, 0x90, 0xb1, 0xb7, 0x4c,
	0xc5, 0xb4, 0x80, 0xdd, 0x21, 0xd8, 0x1e, 0x0b, 0x89, 0x70, 0x96, 0x61, 0x29, 0x3b, 0x75, 0xc9,
	0x9c, 0x18, 0xe1, 0x71, 0x9a, 0xae, 0xfe, 0x76, 0x76, 0xa0, 0x7d, 0xc1, 0xd9, 0x24, 0xfe, 0x42,
	0x2d, 0x98, 0xec, 0x72, 0x83, 0xfb, 0x47, 0x03, 0xd0, 0xf5, 0xbc, 0xde, 0x39, 0xaf, 0xb7, 0xa0,
	0xc1, 0x62, 0x12, 0xe5, 0x77, 0x6c, 0x50, 0x16, 0xb0, 0x5d, 0x08, 0x78, 0x15, 0x6a, 0x32, 0xa1,
	0x72, 0xdb, 0x53, 0x9f, 0x2a, 0x85, 0xef, 0x18, 0xbf, 0xfa, 0x32, 0xc4, 0x3e, 0x41, 0x4d, 0x93,
	0x42, 0x66, 0x50, 0xbe, 0x39, 0x19, 0x63, 0x7e, 0x85, 0x5a, 0xc6, 0xb7, 0x41, 0xca, 0x3e, 0x66,
	0x67, 0x34, 0x24, 0xa8, 0x6d, 0xec, 0x06, 0x39, 0x1b, 0x60, 0x93, 0x31, 0xa6, 0x21, 0x02, 0x6d,
	0x36, 0x40, 0x75, 0x1e, 0xe3, 0x17, 0x47, 0x7a, 0xa1, 0x63, 0x3a, 0x2f, 0xc5, 0xca, 0x13, 0xf6,
	0x25, 0x9d, 0x12, 0xd4, 0xd5, 0x9d, 0x97, 0x20, 0xc7, 0x85, 0x2e, 0xe3, 0x81, 0x2a, 0xde, 0x21,
	0x89, 0xa5, 0x40, 0x3d, 0xbd, 0xaf, 0x64, 0x53, 0x35, 0xa4, 0x62, 0x2f, 0x18, 0xd3, 0x08, 0x2d,
	0xeb, 0xcd, 0x29, 0x54, 0x5e, 0xa9, 0xd8, 0x67, 0x42, 0xa0, 0x15, 0xe3, 0xd5, 0xa0, 0x62, 0x67,
	0xae, 0x96, 0x3a, 0xd3, 0x19, 0xc0, 0x0a, 0x15, 0xc7, 0x04, 0x17, 0x8e, 0x5c, 0x33, 0x74, 0x9d,
	0x33, 0x1b, 0xdf, 0x9f, 0xd3, 0x80, 0x20, 0x27, 0xf5, 0xad, 0x90, 0xf3, 0x00, 0x20, 0x20, 0x31,
	0xe6, 0x72, 0x4c, 0x22, 0x89, 0xd6, 0xfb, 0xb5, 0x41, 0xcd, 0x2b, 0x58, 0x54, 0x15, 0x62, 0x26,
	0xa8, 0xa4, 0x2c, 0x42, 0x1b, 0xa6, 0x0a, 0x29, 0xd6, 0x55, 0x98, 0x62, 0x89, 0x39, 0xda, 0x34,
	0xf5, 0x34, 0x48, 0xdd, 0xce, 0x25, 0xe5, 0x24, 0x38, 0xc4, 0x92, 0xa0, 0x2d, 0xcd, 0x93, 0xdc,
	0xa0, 0x56, 0xbf, 0x61, 0x67, 0xd1, 0x64, 0x7c, 0x46, 0x38, 0xba, 0x63, 0xee, 0x2e, 0x33, 0x38,
	0x47, 0xd0, 0x24, 0xdf, 0x4b, 0x2c, 0x25, 0x47, 0xa8, 0x5f, 0x1b, 0x74, 0x1e, 0x3f, 0x34, 0x5d,
	0x50, 0x45, 0xc9, 0xdd, 0x23, 0xf3, 0xeb, 0xa3, 0x48, 0xf2, 0x99, 0x97, 0xee, 0x55, 0x87, 0x08,
	0x89, 0x25, 0x51, 0x6d, 0x8d, 0xee, 0x9a, 0x43, 0x32, 0x83, 0x4a, 0x8a, 0x8a, 0x97, 0x24, 0xa2,
	0x8c, 0xa3, 0x6d, 0x5d, 0x8e, 0x0c, 0x3b, 0xff, 0x01, 0x9b, 0xab, 0x56, 0x42, 0xf7, 0xf4, 0xf1,
	0x1d, 0x73, 0xbc, 0xee, 0x2e, 0xcf, 0xac, 0xa8, 0xbc, 0x03, 0x1a, 0x5d, 0x0c, 0x03, 0xb4, 0x63,
	0xf2, 0x36, 0x68, 0xfb, 0x29, 0x74, 0x8b, 0xd1, 0x28, 0xde, 0x5e, 0x91, 0x59, 0xd2, 0x8d, 0xea,
	0x53, 0x31, 0x6d, 0x8a, 0xc3, 0x49, 0xda, 0x8f, 0x06, 0x3c, 0x5d, 0x7a, 0x62, 0xb9, 0xbf, 0x58,
	0xb0, 0xa9, 0x32, 0x7b, 0x49, 0xc7, 0x71, 0x48, 0x8e, 0xa9, 0x90, 0x85, 0x87, 0x47, 0x8b, 0x86,
	0x55, 0x10, 0x8d, 0xff, 0x42, 0x2f, 0xbf, 0x23, 0x25, 0x79, 0x4b, 0xba, 0xca, 0xdd, 0xdc, 0x38,
	0x34, 0x2d, 0x76, 0x7e, 0x2e, 0x88, 0xd4, 0xad, 0x57, 0xf3, 0x12, 0xa4, 0x1c, 0x0a, 0xfa, 0x8a,
	0xe8, 0xc6, 0xab, 0x79, 0xfa, 0x5b, 0x05, 0xa6, 0x49, 0x9a, 0xf4, 0x9d, 0x01, 0xee, 0x27, 0xd0,
	0x39, 0xcd, 0x03, 0xba, 0x49, 0xd6, 0xe6, 0x45, 0xc6, 0x7d, 0x6d, 0x99, 0x87, 0xa6, 0x98, 0xcf,
	0xad, 0x45, 0x04, 0x41, 0xf3, 0x12, 0x8b, 0xe7, 0x8c, 0x1b, 0xbd, 0x6a, 0x79, 0x29, 0x74, 0x3e,
	0x82, 0x96, 0x0a, 0x22, 0xa4, 0x42, 0xa2, 0xba, 0xbe, 0xb0, 0xb5, 0x84, 0x2f, 0x85, 0x83, 0xb3,
	0x9f, 0xb8, 0x3f, 0x59, 0xb0, 0xa2, 0xa2, 0xfa, 0xd7, 0xea, 0x6b, 0xdf, 0x58, 0xdf, 0xdf, 0x6d,
	0xe8, 0x9d, 0x1e, 0x12, 0x89, 0x69, 0x48, 0x82, 0x1b, 0x4b, 0x9c, 0xed, 0x37, 0x81, 0x18, 0x50,
	0x14, 0x86, 0x5a, 0x59, 0x18, 0x72, 0xa9, 0xab, 0x97, 0xa4, 0x2e, 0x91, 0x52, 0xbb, 0x42, 0x4a,
	0x1b, 0xd5, 0x52, 0xda, 0x2c, 0x49, 0x69, 0x41, 0xc4, 0x5a, 0x55, 0x22, 0xd6, 0x2e, 0x89, 0x58,
	0x2e, 0x40, 0x50, 0x12, 0x20, 0xdd, 0x8b, 0x46, 0xab, 0xb4, 0xcc, 0xea, 0x5e, 0x34, 0x38, 0x23,
	0x56, 0xb7, 0xf0, 0x18, 0xe4, 0xd2, 0xdb, 0x2b, 0x49, 0x6f, 0x59, 0xc8, 0x96, 0x6f, 0x14, 0xb2,
	0x95, 0x39, 0x21, 0xcb, 0x1e, 0x80, 0xd5, 0xaa, 0x07, 0x60, 0x6d, 0xc1, 0x03, 0x60, 0xa4, 0xcf,
	0x99, 0x97, 0xbe, 0x5c, 0xdc, 0xd6, 0xe7, 0xc5, 0xad, 0x24, 0x8c, 0x1b, 0xf3, 0xc2, 0xf8, 0x34,
	0x97, 0xbe, 0x4d, 0x4d, 0xe5, 0x7e, 0x42, 0xe5, 0x22, 0x43, 0x2a, 0xf4, 0x2e, 0x79, 0x4e, 0x87,
	0x81, 0xd6, 0xdb, 0xe4, 0x39, 0x35, 0x1c, 0x4d, 0xa4, 0xea, 0xce, 0x3b, 0x93, 0xaa, 0x9f, 0x2d,
	0x58, 0xcd, 0x9b, 0xe8, 0x3d, 0x34, 0xf5, 0xa3, 0x6b, 0x4d, 0xbd, 0xbe, 0xa0, 0x12, 0x85, 0xb6,
	0xde, 0x03, 0x38, 0xd5, 0xec, 0xd3, 0x3d, 0x54, 0x9a, 0x7f, 0xad, 0xf2, 0xfc, 0x5b, 0x68, 0xb0,
	0xa5, 0xd2, 0x6c, 0xf9, 0xca, 0xc8, 0x6f, 0xe6, 0xe5, 0x2d, 0x12, 0x7b, 0x04, 0x80, 0x95, 0x9b,
	0x91, 0x4e, 0xa0, 0xa6, 0x13, 0x58, 0x4d, 0x12, 0xc8, 0xfd, 0xb7, 0x71, 0xfa, 0xe9, 0x1e, 0xc3,
	0x8e, 0x3a, 0xfb, 0x00, 0x47, 0x66, 0xc0, 0x7c, 0x4e, 0x7d, 0xce, 0x70, 0x1c, 0xa7, 0x0a, 0xb5,
	0x01, 0x36, 0x8e, 0xe3, 0x61, 0xaa, 0x09, 0x06, 0xa4, 0x99, 0x0c, 0x4b, 0x99, 0x0c, 0x03, 0x97,
	0xc1, 0xfd, 0x0a, 0x6f, 0xb7, 0xce, 0x68, 0x07, 0xda, 0x7e, 0xea, 0x2e, 0xb9, 0xac, 0xdc, 0xe0,
	0xfe, 0x59, 0x83, 0x35, 0x7d, 0x22, 0x27, 0x58, 0x92, 0xbf, 0x31, 0x03, 0x5f, 0x9b, 0x48, 0xe7,
	0xc7, 0xa6, 0xda, 0x82, 0xb1, 0xa9, 0xdc, 0xdf, 0xf5, 0x1b, 0xfb, 0xdb, 0xbe, 0x3e, 0xa8, 0x24,
	0x6a, 0xd8, 0x58, 0xa4, 0x86, 0xcd, 0x0a, 0x35, 0x6c, 0x55, 0xab, 0x61, 0xbb, 0xa4, 0x86, 0xff,
	0x7c, 0x80, 0x2c, 0xe9, 0x44, 0x77, 0x5e, 0x27, 0x72, 0xad, 0xec, 0x5d, 0xd7, 0xca, 0x64, 0x6e,
	0x59, 0x9e, 0x9b, 0x5b, 0x3e, 0xcb, 0xd5, 0x63, 0x45, 0x53, 0xee, 0x7f, 0xf9, 0xe0, 0x54, 0xba,
	0x99, 0xc5, 0x0a, 0xf2, 0x56, 0x8a, 0xf0, 0x35, 0x38, 0xc5, 0x63, 0xde, 0xf5, 0x1f, 0x0b, 0xee,
	0xeb, 0xba, 0x61, 0xd8, 0x69, 0x1c, 0x14, 0x18, 0xb6, 0xe8, 0xe1, 0xae, 0x68, 0xef, 0x8c, 0x75,
	0xb5, 0x02, 0xeb, 0xde, 0xc4, 0xa8, 0x79, 0x56, 0xda, 0x0b, 0x58, 0x59, 0x64, 0x5d, 0xa3, 0x92,
	0x75, 0xcd, 0x45, 0xac, 0x6b, 0x55, 0xb0, 0xae, 0x5d, 0xcd, 0x3a, 0x58, 0xcc, 0xba, 0x4e, 0x15,
	0xeb, 0xba, 0x37, 0xb1, 0xae, 0x57, 0xcd, 0xba, 0xe5, 0x4a, 0xd6, 0xad, 0x54, 0xb3, 0x6e, 0x75,
	0x9e, 0x75, 0xa5, 0xdb, 0x7a, 0x0f, 0xac, 0x7b, 0x68, 0x48, 0x71, 0x48, 0x42, 0xf2, 0x46, 0xd9,
	0x71, 0x9f, 0x98, 0x71, 0x74, 0x1f, 0x4b, 0xff, 0xb2, 0xbc, 0xe3, 0x81, 0xf9, 0x1f, 0x10, 0x0d,
	0xb4, 0x5c, 0x5b, 0xfd, 0xda, 0xa0, 0xed, 0x15, 0x2c, 0xee, 0xa7, 0xb0, 0xad, 0x76, 0x3e, 0x23,
	0xf2, 0x05, 0xbf, 0xd0, 0x34, 0x67, 0x93, 0x48, 0x16, 0x76, 0xb3, 0x28, 0x9c, 0xed, 0x99, 0x91,
	0xc4, 0xbc, 0x36, 0x05, 0x8b, 0x4b, 0xe0, 0xde, 0xc2, 0xdd, 0xb7, 0xee, 0x91, 0x0d, 0xb0, 0x7d,
	0xe5, 0x22, 0x19, 0x3a, 0x0d, 0xd8, 0xbf, 0xff, 0x55, 0x47, 0xff, 0x0f, 0x4b, 0x3c, 0x52, 0xe5,
	0xff, 0x75, 0xa9, 0x77, 0x48, 0xa3, 0x8b, 0x13, 0x1c, 0x5e, 0xed, 0xbe, 0xc0, 0x31, 0x3d, 0x6b,
	0xe8, 0xc5, 0x8f, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x35, 0x17, 0xa3, 0x4c, 0xee, 0x12, 0x00,
	0x00,
}
